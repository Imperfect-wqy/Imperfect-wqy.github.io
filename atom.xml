<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>imperfect</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://imperfect.top/"/>
  <updated>2020-05-02T14:03:15.629Z</updated>
  <id>https://imperfect.top/</id>
  
  <author>
    <name>imperfect</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>test</title>
    <link href="https://imperfect.top/posts/d87f7e0c.html"/>
    <id>https://imperfect.top/posts/d87f7e0c.html</id>
    <published>2020-05-02T22:01:03.000Z</published>
    <updated>2020-05-02T14:03:15.629Z</updated>
    
    <content type="html"><![CDATA[<p>test</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;test&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="test" scheme="https://imperfect.top/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>test01</title>
    <link href="https://imperfect.top/posts/d449ef7e.html"/>
    <id>https://imperfect.top/posts/d449ef7e.html</id>
    <published>2020-05-02T18:05:48.000Z</published>
    <updated>2020-05-02T14:04:43.103Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://imperfect.top/posts/4a17b156.html"/>
    <id>https://imperfect.top/posts/4a17b156.html</id>
    <published>2020-05-02T13:12:07.963Z</published>
    <updated>2020-05-02T14:04:43.083Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>备忘录模式【java设计模式】</title>
    <link href="https://imperfect.top/posts/13dff717.html"/>
    <id>https://imperfect.top/posts/13dff717.html</id>
    <published>2020-04-21T19:52:57.000Z</published>
    <updated>2020-05-02T14:04:43.128Z</updated>
    
    <content type="html"><![CDATA[<p>在不破坏封装的前提下，捕获一个对象的内部状态，<strong>并在该对象之外保存这个状态</strong>，这样可以在以后将对象恢复到原先保存的状态。备忘录嘛，也是比较形象的，就像我们解题的时候可以把过程写下来看，最后可以按照步骤检查，知道哪里出了问题，从那里恢复解题的过程，从而正确解题。<a id="more"></a></p><p><strong>场景：</strong>大家都玩过超级玛丽，合金弹头，或者i wanna这类的游戏叭。有什么组成呢，一个是玩家（<strong>Originator</strong>），一个是经常需要存档的档案（<strong>Memento</strong>），还有一个是游戏后台管理（<strong>Caretaker</strong>）。玩家可以存档（<strong>setMemento和createMemento</strong>），也可以读档，恢复到上次存档的位置（<strong>restoreMemento</strong>）。</p><h3 id="普通备忘录模式："><a href="#普通备忘录模式：" class="headerlink" title="普通备忘录模式："></a>普通备忘录模式：</h3><h4 id="玩家："><a href="#玩家：" class="headerlink" title="玩家："></a>玩家：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Player</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//交给游戏后台处理    1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GameState <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> GameState(status);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//玩家存档           2</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(String status)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.status = status;</span><br><span class="line">        System.out.println(<span class="string">"存档："</span> + status);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(GameState gameState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.status = gameState.getGameStatus();</span><br><span class="line">        System.out.println(<span class="string">"读档："</span> + status);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实我觉得1，2步是可以合起来写成下面这样子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> GameState <span class="title">save</span><span class="params">(String status)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.status = status;</span><br><span class="line">    System.out.println(<span class="string">"存档："</span> + status);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> GameState(status);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="游戏状态（档案）："><a href="#游戏状态（档案）：" class="headerlink" title="游戏状态（档案）："></a>游戏状态（档案）：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GameState</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String gameStatus = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GameState</span><span class="params">(String gameStatus)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gameStatus = gameStatus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGameStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gameStatus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="后台管理："><a href="#后台管理：" class="headerlink" title="后台管理："></a>后台管理：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GameManager</span> </span>&#123;</span><br><span class="line">    GameState gameState;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> GameState <span class="title">getGameState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gameState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这是后台真正存档</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGameState</span><span class="params">(GameState gameState)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"系统已经存档: "</span> + gameState.getGameStatus());</span><br><span class="line">        <span class="keyword">this</span>.gameState = gameState;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Client："><a href="#Client：" class="headerlink" title="Client："></a>Client：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Player imperfext = <span class="keyword">new</span> Player(<span class="string">"imperfext"</span>);</span><br><span class="line">        GameManager gameManager = <span class="keyword">new</span> GameManager();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//玩家自己点了存档，但是不一定存成功</span></span><br><span class="line">        imperfext.save(<span class="string">"第一关"</span>);      </span><br><span class="line">        <span class="comment">//后台要处理玩家的存档的请求（imperfect.create()）</span></span><br><span class="line">        gameManager.setGameState(imperfext.create());</span><br><span class="line"></span><br><span class="line">        imperfext.save(<span class="string">"第二关"</span>);</span><br><span class="line">        gameManager.setGameState(imperfext.create());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这种情况就是可能我们点了存档，还没有成功就退出了</span></span><br><span class="line">        imperfext.save(<span class="string">"第三关"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取档案</span></span><br><span class="line">        imperfext.read(gameManager.getGameState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们已经打到了第三关，但是由于心急或者断网，或者其它原因导致没有真正的存档成功，所以在读档的时候应该是回到了第二关。</p><p><img src="1.png" alt=""></p><p>让我们仔细地看代码，会发现，说到底讲备忘录，备忘的是不是就是游戏角色的状态，为此专门有一个类（GameState）来存这个状态。在恢复状态的时候，在读取备忘录中的状态赋给游戏角色中。所以归根结底都是如何保存游戏角色的状态，然后在需要的时候可以恢复。</p><p>那是不是一定要新建一个类来帮我们保存呢，如果我们直接保存的是上个阶段的游戏角色（而不是单纯的游戏状态），然后读档的时候直接读上个阶段的游戏角色可以吗？也就是发起人（<strong>Originator</strong>）也充当了备忘录（<strong>Memento</strong>）肯定是可以的。</p><p>又来想，要存的是自己，要<strong>拷贝的是自己</strong>来充当备忘录，为了节省空间，是不是自然而然的想到了<strong>原型模式</strong>呢。</p><h3 id="基于clone的备忘录模式："><a href="#基于clone的备忘录模式：" class="headerlink" title="基于clone的备忘录模式："></a>基于clone的备忘录模式：</h3><h4 id="玩家：-1"><a href="#玩家：-1" class="headerlink" title="玩家："></a>玩家：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlayerC</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PlayerC</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(String state)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"玩家进行到："</span> + state);</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//存档，存的是自己</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlayerC <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"玩家存档："</span> + <span class="keyword">this</span>.clone().getState());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//读档</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(PlayerC playerC)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"玩家读档："</span> + playerC.getState());</span><br><span class="line">        setState(playerC.getState());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//克隆自己</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlayerC <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (PlayerC) <span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="后台管理：-1"><a href="#后台管理：-1" class="headerlink" title="后台管理："></a>后台管理：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GameManagerC</span> </span>&#123;</span><br><span class="line">    PlayerC playerC;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlayerC <span class="title">getPlayerC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> playerC;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//真正的存档</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPlayerC</span><span class="params">(PlayerC playerC)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.playerC = playerC;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Client：-1"><a href="#Client：-1" class="headerlink" title="Client："></a>Client：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        PlayerC playerC = <span class="keyword">new</span> PlayerC(<span class="string">"perfext"</span>);</span><br><span class="line">        GameManagerC gameManagerC = <span class="keyword">new</span> GameManagerC();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//分析和普通模式一样，就不再赘述</span></span><br><span class="line">        playerC.setState(<span class="string">"%10"</span>);</span><br><span class="line">        gameManagerC.setPlayerC(playerC.create());</span><br><span class="line"></span><br><span class="line">        playerC.setState(<span class="string">"%20"</span>);</span><br><span class="line">        gameManagerC.setPlayerC(playerC.create());</span><br><span class="line"></span><br><span class="line">        playerC.setState(<span class="string">"%30"</span>);</span><br><span class="line"></span><br><span class="line">        playerC.play(gameManagerC.getPlayerC());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="2.png" alt=""></p><p>对输出做了下优化，这下看得就更清楚了，玩家进行到30%后并没有存档，所以到读档的时候还是到20%，并不是30%。</p><p>上面甚至还不是最简洁的，因为其实我们存档还是要在后台管理类里面存，当然这是希望看到的。想想后台管理类的作用是干嘛的，是用来管理备忘录的，既然备忘录类都可以省略，后台管理类自然也可以精简掉。</p><p>也就是说，玩家的状态保存在玩家的内部，但是这与定义不符合，在一开始我特意加粗了”在该对象之外保存这个状态“。所以说本篇博客就不再讲述这种方式的实现，也比较简单（<strong>提示</strong>：在玩家类内部声明一个成员变量作为恢复的游戏角色）。</p><p>上面讲的都是比较简单的备忘录模式，还有两种比较常用的，一种是一个角色有多个状态同时需要备忘，先讲这种，另外一种卖个关子。</p><h3 id="多状态的备忘录模式："><a href="#多状态的备忘录模式：" class="headerlink" title="多状态的备忘录模式："></a>多状态的备忘录模式：</h3><p><strong>场景：</strong>一个角色有多个状态，那还是拿打游戏的例子，不过游戏角色不仅仅是第几关。新的游戏角色有，打到了哪个阶段，等级是多少以及装备<strong>三个状态</strong>。</p><h4 id="玩家：-2"><a href="#玩家：-2" class="headerlink" title="玩家："></a>玩家：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlayerS</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String equipment;</span><br><span class="line">    <span class="keyword">private</span> String schedule;</span><br><span class="line">    <span class="keyword">private</span> String grade;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存档</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GameStateS <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"玩家存档："</span> + toString());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> GameStateS(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读档案，从保存的状态中一个个读出来</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(GameStateS gameStateS)</span> </span>&#123;</span><br><span class="line">        equipment = (String) gameStateS.getStates().get(<span class="string">"equipment"</span>);</span><br><span class="line">        schedule = (String) gameStateS.getStates().get(<span class="string">"schedule"</span>);</span><br><span class="line">        grade = (String) gameStateS.getStates().get(<span class="string">"grade"</span>);</span><br><span class="line">        System.out.println(<span class="string">"玩家读档："</span> + toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PlayerS</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *1.toString方法，用来方便打印</span></span><br><span class="line"><span class="comment">     * 2.set方法，用来方便玩家存档</span></span><br><span class="line"><span class="comment">     *3.get方法，方便存储玩家的状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"PlayerS&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", equipment='"</span> + equipment + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", schedule='"</span> + schedule + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", grade='"</span> + grade + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEquipment</span><span class="params">(String equipment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.equipment = equipment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSchedule</span><span class="params">(String schedule)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.schedule = schedule;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGrade</span><span class="params">(String grade)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEquipment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> equipment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSchedule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> schedule;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGrade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> grade;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="游戏状态（档案）：-1"><a href="#游戏状态（档案）：-1" class="headerlink" title="游戏状态（档案）："></a>游戏状态（档案）：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GameStateS</span> </span>&#123;</span><br><span class="line">    <span class="comment">//多状态，所以用hashmap来保存</span></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String, Object&gt; states = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存着玩家的状态</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GameStateS</span><span class="params">(PlayerS playerS)</span> </span>&#123;</span><br><span class="line">        states.put(<span class="string">"schedule"</span>, playerS.getSchedule());</span><br><span class="line">        states.put(<span class="string">"grade"</span>, playerS.getGrade());</span><br><span class="line">        states.put(<span class="string">"equipment"</span>, playerS.getEquipment());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HashMap&lt;String, Object&gt; <span class="title">getStates</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> states;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="后台管理：-2"><a href="#后台管理：-2" class="headerlink" title="后台管理："></a>后台管理：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GameManagerS</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> GameStateS gameStateS;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GameStateS <span class="title">getGameStateS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gameStateS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//真正存档</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGameStateS</span><span class="params">(GameStateS gameStateS)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"系统已经存档!"</span>);</span><br><span class="line">        <span class="keyword">this</span>.gameStateS = gameStateS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Client：-2"><a href="#Client：-2" class="headerlink" title="Client："></a>Client：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientS</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        PlayerS player = <span class="keyword">new</span> PlayerS(<span class="string">"perfext"</span>);</span><br><span class="line">        GameManagerS gameManagerS = <span class="keyword">new</span> GameManagerS();</span><br><span class="line"></span><br><span class="line">        player.setSchedule(<span class="string">"10%"</span>);</span><br><span class="line">        player.setEquipment(<span class="string">"2件套"</span>);</span><br><span class="line">        player.setGrade(<span class="string">"6级"</span>);</span><br><span class="line">        gameManagerS.setGameStateS(player.save());</span><br><span class="line"></span><br><span class="line">        player.setSchedule(<span class="string">"30%"</span>);</span><br><span class="line">        player.setEquipment(<span class="string">"4件套"</span>);</span><br><span class="line">        player.setGrade(<span class="string">"10级"</span>);</span><br><span class="line">        gameManagerS.setGameStateS(player.save());</span><br><span class="line"></span><br><span class="line">        player.setSchedule(<span class="string">"80%"</span>);</span><br><span class="line">        player.setEquipment(<span class="string">"6件套"</span>);</span><br><span class="line">        player.setGrade(<span class="string">"15级"</span>);</span><br><span class="line">        System.out.println(<span class="string">"忘记存档了！已经打到了："</span>);</span><br><span class="line">        System.out.println(player.toString());</span><br><span class="line"></span><br><span class="line">        player.read(gameManagerS.getGameStateS());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="3.png" alt=""></p><p>本质还是那样，没有太大变化，就是把状态用hashmap做了一个封装。</p><p>目前为止，对于上面所讲的所有备忘录模式，不知道各位小伙伴有没有发现一个问题，就是在恢复的时候，只能恢复特定的状态（一般是最后备忘的那个状态）。但是在现实社会中，在码字或者打代码的时候总你能够ctrl + z（撤销）好几次，可以撤销回满意的状态。下面要讲的应该可以帮助到你。</p><h3 id="撤销多次的备忘录模式："><a href="#撤销多次的备忘录模式：" class="headerlink" title="撤销多次的备忘录模式："></a>撤销多次的备忘录模式：</h3><p>原谅我不知道怎么高大上专业的表述这种备忘录模式。</p><p><strong>场景：</strong>再用游戏讲的话不太清楚，接下来打字员（<strong>Originator</strong>）打字，内容（<strong>Memento</strong>）交给电脑（<strong>Caretaker</strong>）保存来演示。</p><h4 id="打字员"><a href="#打字员" class="headerlink" title="打字员"></a>打字员</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Typist</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String word;<span class="comment">//最新的状态</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; content = <span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//所有的状态</span></span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;<span class="comment">//状态的位置，根据这个位置来读取</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Typist</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWord</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.word = word;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TypeContent <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        content.add(word);</span><br><span class="line">        System.out.println(<span class="string">"打字员保存："</span> + word);</span><br><span class="line">        len++;<span class="comment">//长度+1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TypeContent(content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(TypeContent typeContent)</span> </span>&#123;</span><br><span class="line">        content = typeContent.getTypeContent();</span><br><span class="line">        System.out.println(<span class="string">"目前显示："</span> + content.get(--len));<span class="comment">//读完后长度-1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="内容："><a href="#内容：" class="headerlink" title="内容："></a>内容：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeContent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; typeContent = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存用户写的字</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TypeContent</span><span class="params">(List&lt;String&gt; typeContent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.typeContent = typeContent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getTypeContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> typeContent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="电脑："><a href="#电脑：" class="headerlink" title="电脑："></a>电脑：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TypeContent typeContent;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TypeContent <span class="title">getTypeContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> typeContent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//真正保存用户写的字</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTypeContent</span><span class="params">(TypeContent typeContent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.typeContent = typeContent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Client：-3"><a href="#Client：-3" class="headerlink" title="Client："></a>Client：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientM</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Typist perfext = <span class="keyword">new</span> Typist(<span class="string">"perfext"</span>);</span><br><span class="line">        Computer computer = <span class="keyword">new</span> Computer();</span><br><span class="line"></span><br><span class="line">        perfext.setWord(<span class="string">"abcd"</span>);</span><br><span class="line">        computer.setTypeContent(perfext.save());</span><br><span class="line">        perfext.setWord(<span class="string">"efg"</span>);</span><br><span class="line">        computer.setTypeContent(perfext.save());</span><br><span class="line">        perfext.setWord(<span class="string">"hijkl"</span>);</span><br><span class="line">        computer.setTypeContent(perfext.save());</span><br><span class="line">        perfext.setWord(<span class="string">"mnopq"</span>);</span><br><span class="line">        computer.setTypeContent(perfext.save());</span><br><span class="line"></span><br><span class="line">        perfext.read(computer.getTypeContent());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//模拟ctrl+z</span></span><br><span class="line">        System.out.println(<span class="string">"撤销："</span>);</span><br><span class="line">        perfext.read(computer.getTypeContent());</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"撤销："</span>);</span><br><span class="line">        perfext.read(computer.getTypeContent());</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"撤销："</span>);</span><br><span class="line">        perfext.read(computer.getTypeContent());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="4.png" alt=""></p><p>结果也和预期一样，可以多次撤销，至此，所有情况下的备忘录模式都讲完了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在不破坏封装的前提下，捕获一个对象的内部状态，&lt;strong&gt;并在该对象之外保存这个状态&lt;/strong&gt;，这样可以在以后将对象恢复到原先保存的状态。备忘录嘛，也是比较形象的，就像我们解题的时候可以把过程写下来看，最后可以按照步骤检查，知道哪里出了问题，从那里恢复解题的过程，从而正确解题。
    
    </summary>
    
    
      <category term="设计模式" scheme="https://imperfect.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="进阶" scheme="https://imperfect.top/tags/%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>volatile详解</title>
    <link href="https://imperfect.top/posts/6e37ac90.html"/>
    <id>https://imperfect.top/posts/6e37ac90.html</id>
    <published>2020-04-19T17:18:04.000Z</published>
    <updated>2020-05-02T14:04:43.110Z</updated>
    
    <content type="html"><![CDATA[<p> volatile详解其实写这篇博客是花了比较长的时间，找了挺多资料，找资料的时候就发现，好像网上讲得都不太透彻（很大可能是我的理解太差）。所以就想写得大家能够看懂，写得透彻一点，至少有例子来佐证观点。<a id="more"></a></p><h3 id="volatile的3个特性："><a href="#volatile的3个特性：" class="headerlink" title="volatile的3个特性："></a>volatile的3个特性：</h3><ul><li>保证了各个线程之间的可见性</li><li>不能保证原子性</li><li>防止重排序</li></ul><p>下面会将举例讲解着三个特点，然后再讲，这三个特点为什么会这样。</p><h3 id="可见性："><a href="#可见性：" class="headerlink" title="可见性："></a>可见性：</h3><p>首先，每个线程都有自己的工作内存，除此之外还有一个cpu的主存，工作内存是主存的副本。线程工作的时候，不能直接操作主内存中的值，而是要将主存的值拷贝到自己的工作内存中；在修改变量是，会先在工作内存中修改，随后刷新到主存中。</p><p><img src="1.png" alt=""></p><p>假设有一个共享变量flag为false，线程a修改为true后，自己的工作内存修改了，也刷新到了主存。这时候线程b对flag进行对应操作时，是不知道a修改了的，也称a对b<strong>不可见</strong>。所以我们需要一种机制，在主存的值修改后，及时地通知所有线程，保证它们都可以看到这个变化。</p><p>上面总结成代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadWriteDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        flag = <span class="keyword">true</span>;</span><br><span class="line">        System.out.println(<span class="string">"flag has changed:"</span> + flag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ReadWriteDemo readWriteDemo = <span class="keyword">new</span> ReadWriteDemo2();</span><br><span class="line">        <span class="comment">//创建一个线程，用来修改flag，如上面描述的a线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                    readWriteDemo.change();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//主线程，如上面描述的b线程</span></span><br><span class="line">        <span class="keyword">while</span>(!readWriteDemo.flag) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"flag:"</span> + readWriteDemo.flag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一开始也说过volatile保证可见性，现在是没有加volatile，按照分析，主线程（b线程）是看不到子线程（a线程）修改了flag的值。也就是说，在主线程看来，flag 永远为false，<code>while(!readWriteDemo.flag) {}</code>的判断条件为true，系统不会执行到<code>System.out.println(&quot;flag:&quot; + readWriteDemo.flag);</code></p><p><img src="2.png" alt=""></p><p>为了避免偶然性，我让程序跑了6分钟。可以看到，子线程确实修改了flag的值，主线程也和我们预期一样，看不到flag的变化，一直在死循环，如果给flag变量加一个volatile呢。预期结果是，子线程修改变量对主线程来说是可见的，主线程会退出循环。</p><p><img src="3.png" alt=""></p><p>可以看到，都不到一分钟，在子线程修改flag的值后，主线程随即就退出循环，说明立刻感知到了flag变量的变化。</p><p><strong>有趣的是什么呢：</strong>如果ab两个线程间隔时间不长，也就是说a线程延迟10ms（不是上面的延迟3s）修改flag的值，而b线程也延迟10s读（不是上面的立刻读），你会发现两个线程之间的修改<strong>也是可见的</strong>，所以内部之间的内存问题不是我们想象的那么简单。不过就算如此，上面的例子也能很好地看出来volatile保证了可见性。</p><h3 id="如何保证可见性："><a href="#如何保证可见性：" class="headerlink" title="如何保证可见性："></a>如何保证可见性：</h3><p>首先要先讲一下java内存模型，java的的内存模型规定了工作内存与主存之间交互的协议，定义了8中原子操作：</p><ol><li>lock：将主内存的变量锁定，为一个线程所独占。</li><li>unlock：将lock加的锁定解除，此时其他线程可以有机会访问此变量。</li><li>read：将主内存中的变量值读到工作线程中。</li><li>load：将read读取到的值保存到工作内存中的变量副本中。</li><li>use：将值传递给线程的代码执行引擎。</li><li>assign：将执行引擎处理返回的值重新赋值给变量副本。</li><li>store：将变量副本的值存储到主内存中。</li><li>write：将store存储的值写入到主内存的共享变量中。</li></ol><p>我上网查了下资料，也看了不同的博客，有讲到volatile其实在底层就是加了一个lock的前缀指令。lock前缀的指令要干什么上面也有写。如果对带有volatile的变量进行写操作会怎么呢。JVM会像处理器发送一条lock前缀的指令，a线程就锁定主存内的变量，修改后再刷新到主存。b线程同样会锁定主存内的变量，但是会发现主存内的变量和工作内存的值不一样，就会从主存中读取最新的值。从而保证了每个线程都能对变量的改变可见。</p><h3 id="原子性："><a href="#原子性：" class="headerlink" title="原子性："></a>原子性：</h3><p>在编程世界里面，原子性是指不能分割的操作，一个操作要么全部执行，要么全部不执行，是执行的最小单元。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAutomic</span> </span>&#123;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TestAutomic testAutomic = <span class="keyword">new</span> TestAutomic();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                        testAutomic.add();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//等待12秒，让子线程全部执行完</span></span><br><span class="line">        Thread.sleep(<span class="number">12000</span>);</span><br><span class="line">        System.out.println(testAutomic.num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>预期现象：</strong>都说不能保证原子性了，所以，应该结果是不等于1000</p><p><img src="4.png" alt=""></p><p>不同电脑执行的结果不一样，我的是886，可能你们的不是，但是都说明了volatile都无法保证操作的原子性。</p><h3 id="为什么不能保证原子性："><a href="#为什么不能保证原子性：" class="headerlink" title="为什么不能保证原子性："></a>为什么不能保证原子性：</h3><p>这要从num++操作开始讲起，num++操作可以分为三步：</p><ul><li>读取i的值，装载进工作内存</li><li>对i加1操作</li><li>将i的值写回工作内存，刷新到主存中</li></ul><p>我们知道线程的执行具有随机性，假设a线程和b线程中的工作内存中都是num=0，a线程先抢了cpu的执行权，在工作内存进行了加1操作，还没刷新到主存中；b线程这时候拿到了cpu的执行权，也加1；接着a线程刷新到主存num=1，而b线程刷新到主存，同样是num=1，但是两次操作后num应该等于2。</p><p><strong>解决方案：</strong></p><ul><li>使用synchronized关键字</li><li>使用原子类</li></ul><h3 id="重排序："><a href="#重排序：" class="headerlink" title="重排序："></a>重排序：</h3><p>对于我们写的程序，cpu会根据如何让程序更高效来对指令进行重排序，什么意思呢</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">2</span>;</span><br><span class="line">b = <span class="keyword">new</span> B();</span><br><span class="line">c = <span class="number">3</span>;</span><br><span class="line">d = <span class="keyword">new</span> D();</span><br></pre></td></tr></table></figure><p>经过优化后，可能真实的指令顺序是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">2</span>;</span><br><span class="line">c = <span class="number">3</span>;</span><br><span class="line">b = <span class="keyword">new</span> B();</span><br><span class="line">d = <span class="keyword">new</span> D();</span><br></pre></td></tr></table></figure><p>并不是所有的指令都会重排序，重排序与否全是看能不能使得指令更高效，还有下面一种情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">2</span>;</span><br><span class="line">b = a;</span><br></pre></td></tr></table></figure><p>这两行代码无论什么情况下都不会重排序，因为第二条指令是依赖第一条指令的，重排序是建立在排序后最终结果仍然保持不变的基础上。下面将给出volatile防止重排序的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestReorder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>, x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            a = <span class="number">0</span>; b = <span class="number">0</span>; x = <span class="number">0</span>; y = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//a线程</span></span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                        a = <span class="number">1</span>;</span><br><span class="line">                        x = b;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//b线程</span></span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                        b = <span class="number">1</span>;</span><br><span class="line">                        y = a;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//主线程睡100ms，以保证子线程全部执行完</span></span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            System.out.println(<span class="string">"a="</span> + a + <span class="string">";b="</span> + b + <span class="string">";x="</span> + x + <span class="string">";y="</span> + y);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>还记得上面说过两个线程如果沉睡时间差不多，它们之间是可见</strong></p><p><strong>预期结果：</strong></p><ul><li>如果先执行<strong>完</strong>a线程（a = 1, x = b = 0），再执行<strong>完</strong>b线程（b = 1, y = a = 1），最终结果a = 1; b = 1; <strong>x = 0; y = 1</strong></li><li>如果先执行<strong>完</strong>b线程（b = 1, y = a = 0），再执行<strong>完</strong>a线程（a = 1, x = b = 1），最终结果a = 1; b = 1; <strong>x = 1; y = 0</strong></li><li>如果执行a线程<strong>过程</strong>（a = 1），接着执行了b线程（b = 1，y = a = 1）【为什么y = a<strong>一定等于</strong>1，因为它们两个之间的改变是可见的】，最后执行了a线程（x = b = 1），最终结果a = 1；b = 1; <strong>x = 1; y = 1</strong></li></ul><p><img src="5.png" alt=""></p><p>可以发现除了上面预期的三种情况，还出现了一种a = 1; b = 1; <strong>x = 0; y = 0</strong>的情况，相信大家也知道了，这种情况就是因为重排序造成的。要么是a线程重排序先执行<code>x = b;</code>再执行<code>a = 1;</code>，要么是b线程重排序先执行了<code>y = a;</code>再执行了<code>b = 1;</code>；要么是两个线程都重排序了。</p><p>如果<code>private volatile static int a = 0, b = 0, x = 0, y = 0;</code>加了volatile关键字会怎么样呢？</p><p><img src="6.png" alt=""></p><p>为了保证正确性，又持续跑了5分钟，可以发现，确实不会再出现<strong>x=0;y=0</strong>的情况。</p><h3 id="如何防止重排序？"><a href="#如何防止重排序？" class="headerlink" title="如何防止重排序？"></a>如何防止重排序？</h3><p>先来讲讲4个内存屏障的作用</p><table><thead><tr><th>内存屏障</th><th>作用</th></tr></thead><tbody><tr><td>StoreStore屏障</td><td>禁止上面的普通写和下面的的volatile写重排序</td></tr><tr><td>StoreLoad屏障</td><td>禁止上面的volatile写和下面volatile读/写重排序</td></tr><tr><td>LoadLoad屏障</td><td>禁止下面的普通读和上面的volatile读重排序</td></tr><tr><td>LoadStore屏障</td><td>禁止下面的普通写和上面的volatile读重排序</td></tr></tbody></table><p>可能看作用比较抽象，直接举例子叭</p><ul><li>对于<code>S1; StoreStore; S2</code>，在S2及后续写入操作之前，保证S1的写入操作对其它线程可见。</li><li>对于<code>S; StoreLoad; L</code>，在L及后续读/写操作之前，保证S的写入对其它线程可见。</li><li>对于<code>L1; LoadLoad; L2</code>，在L2及后续读操作之前，保证L1读取数据完毕。</li><li>对于<code>L; LoadStore; S</code>，在S及后续操作之前，保证L读取数据完毕。</li></ul><p>那么volatile是如何保证有序性的呢？</p><ul><li>在每个volatile写操作前插入StoreStore屏障，每个写操作后面加一个StoreLoad屏障。</li><li>在每个volatile读操作前插入LoadLoad屏障，在读操作后插入LoadStore屏障。</li></ul><p>举例，有个对volatile变量的写S，有个对volatile变量的读L，会怎么样呢。</p><ul><li>对于写：<code>S1; StoreStore; S ;StoreLoad L</code>这样能够把S（对volatile变量保护在中间）防止重排序。</li><li>对于读一样的道理：<code>L1; LoadLoad; L ; LoadStore S</code>，一样把volatile变量保护的好好的。</li></ul><p>有关volatile的讲解就到这里了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; volatile详解其实写这篇博客是花了比较长的时间，找了挺多资料，找资料的时候就发现，好像网上讲得都不太透彻（很大可能是我的理解太差）。所以就想写得大家能够看懂，写得透彻一点，至少有例子来佐证观点。
    
    </summary>
    
    
      <category term="多线程" scheme="https://imperfect.top/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="进阶" scheme="https://imperfect.top/tags/%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>让你的windows更高效</title>
    <link href="https://imperfect.top/posts/4a4db0db.html"/>
    <id>https://imperfect.top/posts/4a4db0db.html</id>
    <published>2020-04-15T21:07:37.000Z</published>
    <updated>2020-05-02T14:04:43.188Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知，电脑系统主要有三大类，linux，windows和macos。Linux是十分适合程序员开发的，安全，病毒少，能够让开发人员专注于代码；mac凭借电脑本身的品控和优良的ui，流畅的系统也获得不俗的用户；当然，全球使用人数最多的系统还是windows，因为基本买电脑都自带激活的正版的windows，而且mac主要是太贵太贵了。</p><p>其实windows系统并不是那么糟糕，重点在于你使用电脑的习惯，不乱下载软件，不乱去某些网站这是必须的，下面将介绍几款我常用的软件给大家。<a id="more"></a></p><h3 id="浏览器篇："><a href="#浏览器篇：" class="headerlink" title="浏览器篇："></a>浏览器篇：</h3><h4 id="edge："><a href="#edge：" class="headerlink" title="edge："></a>edge：</h4><p>肯定不是旧版的edge，而是基于chromium的新版edge，电脑应该会自动升级，也有可能需要去官网下载。</p><h4 id="chrome："><a href="#chrome：" class="headerlink" title="chrome："></a>chrome：</h4><p>chrome就不用多说了，无脑推荐就完了</p><h4 id="firefox："><a href="#firefox：" class="headerlink" title="firefox："></a>firefox：</h4><p>还有一个就是火狐，火狐的安全性比较高，好像是对前端比较友好？忘记了，但是这个也是个不错的选择，如果你实在是不知道选择哪个，那就都下载不香吗。</p><h4 id="插件："><a href="#插件：" class="headerlink" title="插件："></a>插件：</h4><p>上述浏览器无论是ui界面，还是流畅度都比较不错。当然浏览器还离不开好的插件，这里就推荐我常用的几个插件给大家。</p><ul><li><strong>油猴：</strong>不多说，谁用谁知道</li><li><strong>AdBlockPlus：</strong>目前用过最好的广告拦截插件，csdn烦人的广告终于去除掉了。</li><li><strong>集装箱：</strong>可以优先装这个插件，能让你访问谷歌应用中心，不过更深层次的科学上网就不推荐了，还有就是能让你谷歌搜索，很大程度上谷歌搜索的内容还是比较优质的。</li></ul><p>其它的插件有没有，有，但是都不推荐，因为你下载那么多插件不用的话也是白白占用cpu资源，所以自己有需求的，可以去应用商店里面看一下啦。</p><h3 id="搜索篇："><a href="#搜索篇：" class="headerlink" title="搜索篇："></a>搜索篇：</h3><p>当你想要找什么资料的时候，是不是苦于寻找之前放的位置，但是又想不起来。使用电脑自带的搜索，慢得不要不要的，这时候就需要搜索神器来帮我们解决问题啦。</p><h4 id="listary："><a href="#listary：" class="headerlink" title="listary："></a>listary：</h4><p>下载安装完成后，界面是这样的</p><p><img src="1.png" alt=""></p><p>想要搜索东西的时候呢，只要唤醒就好啦，唤醒的快捷键大家可以根据喜好来设置。</p><p><img src="2.png" alt=""></p><p>可以看到，输入abc之后，所有的文件几乎是在瞬间就把，文件夹，文件，还有软件打开的快捷方式都给列出来了。</p><h4 id="everything："><a href="#everything：" class="headerlink" title="everything："></a>everything：</h4><p><img src="3.png" alt=""></p><p>everything也是把所有的文件夹给列出来，ui比listary美化不少。两款软件的功能都差不都，至于这选择哪一个呢，仁者见仁智者见智。问我？肯定都下载结合着用啦。</p><h4 id="utools："><a href="#utools：" class="headerlink" title="utools："></a>utools：</h4><p>还有这款软件更加强大，但是好像我电脑安装后，老是出现收集错误信息的字样，就把它删了。</p><h3 id="防护以及软件卸载："><a href="#防护以及软件卸载：" class="headerlink" title="防护以及软件卸载："></a>防护以及软件卸载：</h3><h4 id="火绒："><a href="#火绒：" class="headerlink" title="火绒："></a>火绒：</h4><p><img src="4.png" alt=""></p><p><strong>零捆绑，零广告，零弹窗</strong>。个人习惯就是把3某0系的所有东西都卸载掉，也是我的个人建议，大家根据自己的实际情况而定。</p><p>如果自己的使用电脑的习惯足够干净，其实不用防护软件也可以的，不过有总比没有好嘛。</p><h4 id="CCleaner："><a href="#CCleaner：" class="headerlink" title="CCleaner："></a>CCleaner：</h4><p>一款优良的辣鸡清理软件，有免费版和付费版，免费版就够我们用啦。</p><p><img src="5.png" alt=""></p><p>亲身体验清理东西还是比较给力的，有时候c盘莫名多了几百m，跑不了是缓存没有清，跑下这个软件又可以开心的看到c盘多了起来。</p><h4 id="Geekuninstall："><a href="#Geekuninstall：" class="headerlink" title="Geekuninstall："></a>Geekuninstall：</h4><p>上面推荐的ccleaner其实也可以卸载软件，但是下面这一款更加的好用。</p><p><img src="6.png" alt=""></p><h3 id="桌面美化："><a href="#桌面美化：" class="headerlink" title="桌面美化："></a>桌面美化：</h3><ul><li>translucent：微软商店自带的一款透明栏软件</li><li>火萤桌面：能够让你的桌面更加好看，有静态壁纸和动态壁纸，主要是免费</li><li>wallpaperengine：steam上付费的桌面壁纸软件，让你找到正版好看的壁纸。当然，你非得用来干嘛，谁也拦不住你，只是不推荐。</li></ul><h3 id="其它小软件："><a href="#其它小软件：" class="headerlink" title="其它小软件："></a>其它小软件：</h3><h4 id="Snipaste（截图）："><a href="#Snipaste（截图）：" class="headerlink" title="Snipaste（截图）："></a>Snipaste（截图）：</h4><p><img src="7.png" alt=""></p><p>随时随地，F1截图，F3贴图，实在是方便。</p><h4 id="PotPlayer（播放器）："><a href="#PotPlayer（播放器）：" class="headerlink" title="PotPlayer（播放器）："></a>PotPlayer（播放器）：</h4><p><img src="8.png" alt=""></p><p>全能播放器，你能想到的视频格式，都能播放，还支持多个功能。</p><h4 id="foxit阅读器（阅读pdf）："><a href="#foxit阅读器（阅读pdf）：" class="headerlink" title="foxit阅读器（阅读pdf）："></a>foxit阅读器（阅读pdf）：</h4><p>国产比较好用的免费的pdf阅读软件，不过你想要<strong>无水印修改</strong>还是要付费的。</p><p><img src="9.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;众所周知，电脑系统主要有三大类，linux，windows和macos。Linux是十分适合程序员开发的，安全，病毒少，能够让开发人员专注于代码；mac凭借电脑本身的品控和优良的ui，流畅的系统也获得不俗的用户；当然，全球使用人数最多的系统还是windows，因为基本买电脑都自带激活的正版的windows，而且mac主要是太贵太贵了。&lt;/p&gt;
&lt;p&gt;其实windows系统并不是那么糟糕，重点在于你使用电脑的习惯，不乱下载软件，不乱去某些网站这是必须的，下面将介绍几款我常用的软件给大家。
    
    </summary>
    
    
      <category term="生活" scheme="https://imperfect.top/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="其它" scheme="https://imperfect.top/tags/%E5%85%B6%E5%AE%83/"/>
    
  </entry>
  
  <entry>
    <title>组合模式【java设计模式】</title>
    <link href="https://imperfect.top/posts/ea790ebe.html"/>
    <id>https://imperfect.top/posts/ea790ebe.html</id>
    <published>2020-04-15T21:07:14.000Z</published>
    <updated>2020-05-02T14:04:43.183Z</updated>
    
    <content type="html"><![CDATA[<p>组合模式也叫合成模式，有时也叫整体-部分模式，是用来描述整体和部分关系的。和树的形成非常像，树有根节点，子节点，叶结点。而组合模式呢有，<strong>Component，Composite，Leaf</strong>，当然不是严格意义上的一一对应，不过也差不多。<a id="more"></a></p><p><strong>场景：</strong>一个公司有老板，老板下面有项目组，美工组，各个组呢又有组长和具体的员工，我们怎样把这样一个整体-部分的结构展现出来呢。</p><h3 id="抽象员工（component）："><a href="#抽象员工（component）：" class="headerlink" title="抽象员工（component）："></a>抽象员工（component）：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    String name;<span class="comment">//名字</span></span><br><span class="line">    String position;<span class="comment">//职位</span></span><br><span class="line">    String salary;<span class="comment">//薪水</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//报告人员情况</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">report</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String str =  <span class="string">"Employee&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", position='"</span> + position + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", salary='"</span> + salary + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name, String position, String salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.position = position;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//招聘员工</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">addEmployee</span><span class="params">(Employee employee)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解聘员工</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">deleteEmployee</span><span class="params">(Employee employee)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="领导（composite）："><a href="#领导（composite）：" class="headerlink" title="领导（composite）："></a>领导（composite）：</h3><p>下一层还有员工的都算是领导，只是领导的大小不同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Leader</span> <span class="keyword">extends</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//这里本来应该是private，然后外部通过get获取才合适，为了演示</span></span><br><span class="line">    List&lt;Employee&gt; subEmployees;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Leader</span><span class="params">(String name, String position, String salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, position, salary);</span><br><span class="line">        <span class="comment">//new一个下一层员工的List集合</span></span><br><span class="line">        subEmployees = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addEmployee</span><span class="params">(Employee employee)</span> </span>&#123;</span><br><span class="line">        subEmployees.add(employee);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteEmployee</span><span class="params">(Employee employee)</span> </span>&#123;</span><br><span class="line">        subEmployees.remove(employee);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">report</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我的情况："</span>);</span><br><span class="line">        <span class="keyword">super</span>.report();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"我手下员工的情况"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Employee e: subEmployees) &#123;</span><br><span class="line">            e.report();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="员工类（leaf）："><a href="#员工类（leaf）：" class="headerlink" title="员工类（leaf）："></a>员工类（leaf）：</h3><p>是工作在最前线的员工，手下并没有其它人员。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Staff</span> <span class="keyword">extends</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Staff</span><span class="params">(String name, String position, String salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, position, salary);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//手底都没有员工，增加和删除操作就空实现，注意这里的空实现</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addEmployee</span><span class="params">(Employee employee)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteEmployee</span><span class="params">(Employee employee)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">report</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.report();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Client："><a href="#Client：" class="headerlink" title="Client："></a>Client：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//构建公司的人员情况</span></span><br><span class="line">       Leader boss = <span class="keyword">new</span> Leader(<span class="string">"temp"</span>, <span class="string">"老板"</span>, <span class="string">"100000"</span>);</span><br><span class="line">        Leader projectBoss = <span class="keyword">new</span> Leader(<span class="string">"temp1"</span>, <span class="string">"项目组组长"</span>, <span class="string">"50000"</span>);</span><br><span class="line">        Leader artBoss = <span class="keyword">new</span> Leader(<span class="string">"temp2"</span>, <span class="string">"美工组组长"</span>, <span class="string">"50001"</span>);</span><br><span class="line"></span><br><span class="line">        boss.subEmployees.add(projectBoss);</span><br><span class="line">        boss.subEmployees.add(artBoss);</span><br><span class="line"></span><br><span class="line">        projectBoss.subEmployees.add(<span class="keyword">new</span> Staff(<span class="string">"pTemp1"</span>, <span class="string">"p员工1"</span>, <span class="string">"20001"</span>));</span><br><span class="line">        projectBoss.subEmployees.add(<span class="keyword">new</span> Staff(<span class="string">"pTemp2"</span>, <span class="string">"p员工2"</span>, <span class="string">"20002"</span>));</span><br><span class="line">        projectBoss.subEmployees.add(<span class="keyword">new</span> Staff(<span class="string">"pTemp3"</span>, <span class="string">"p员工3"</span>, <span class="string">"20003"</span>));</span><br><span class="line"></span><br><span class="line">        artBoss.subEmployees.add(<span class="keyword">new</span> Staff(<span class="string">"aTemp1"</span>, <span class="string">"a员工1"</span>, <span class="string">"20011"</span>));</span><br><span class="line">        artBoss.subEmployees.add(<span class="keyword">new</span> Staff(<span class="string">"aTemp2"</span>, <span class="string">"a员工2"</span>, <span class="string">"20012"</span>));</span><br><span class="line">        artBoss.subEmployees.add(<span class="keyword">new</span> Staff(<span class="string">"aTemp3"</span>, <span class="string">"a员工3"</span>, <span class="string">"20013"</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"项目组跟老板汇报："</span>);</span><br><span class="line">        projectBoss.report();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"------------------------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"美工组跟老板汇报："</span>);</span><br><span class="line">        artBoss.report();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"------------------------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"老板跟ceo汇报："</span>);</span><br><span class="line">        boss.report();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="1.png" alt=""></p><h3 id="优缺点："><a href="#优缺点：" class="headerlink" title="优缺点："></a>优缺点：</h3><ul><li><strong>优点：</strong><ul><li>所有的结点都是component，高层不用知道自己处理的是一个个体还是整体，总之你有，我就能调用，但是我不在乎调用的是整体还是个体</li><li>如果想增加一个极点，是很简单，很自由的</li></ul></li><li><strong>缺点：</strong>缺点也十分明显，在构建结构是这样子的：<code>Leader boss = new Leader(&quot;temp&quot;, &quot;老板&quot;, &quot;100000&quot;);</code>，（<strong>实现=new实现类</strong>）而一般是需要这样子的：<code>Employee boss = new Leader(&quot;temp&quot;, &quot;老板&quot;, &quot;100000&quot;);</code>（<strong>接口=new实现类</strong>）。总结就是，与<strong>依赖倒置原则冲突了，在面向接口的编程上是不恰当的</strong>。</li></ul><h3 id="两种实现方式："><a href="#两种实现方式：" class="headerlink" title="两种实现方式："></a>两种实现方式：</h3><p>组合模式呢，有两种实现方式：上面讲述的是<strong>透明模式</strong>，什么意思呢，就是component中的接口在composite和leaf中都实现了，只不过在leaf中<code>public void addEmployee(Employee employee) {}</code>和<code>public void deleteEmployee(Employee employee) {}</code>是空实现。这样假如某个实习生一来不知道，实现了这两个方法，编译时是不会报错的，在运行的时候，结果就不是我们想要的了，所以说透明但不安全。</p><p>相对应的自然就有一个<strong>安全模式</strong>了，安全模式就是component并不实现了所有的接口，只声明了真正共有的，剩下的再给composite和leaf自己添加。</p><h4 id="component："><a href="#component：" class="headerlink" title="component："></a>component：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    String position;</span><br><span class="line">    String salary;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">report</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String str =  <span class="string">"Employee&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", position='"</span> + position + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", salary='"</span> + salary + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name, String position, String salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.position = position;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一线员工没有增加员工，删除员工</span></span><br><span class="line">    <span class="comment">//public abstract void addEmployee(Employee employee);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//public abstract void deleteEmployee(Employee employee);</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="composite："><a href="#composite：" class="headerlink" title="composite："></a>composite：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Leader</span> <span class="keyword">extends</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Employee&gt; subEmployees;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Leader</span><span class="params">(String name, String position, String salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, position, salary);</span><br><span class="line">        <span class="comment">//new一个下一层员工的List集合</span></span><br><span class="line">        subEmployees = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注意这里并不是重写的方法，而是自己定义的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addEmployee</span><span class="params">(Employee employee)</span> </span>&#123;</span><br><span class="line">        subEmployees.add(employee);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteEmployee</span><span class="params">(Employee employee)</span> </span>&#123;</span><br><span class="line">        subEmployees.remove(employee);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">report</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我的情况："</span>);</span><br><span class="line">        <span class="keyword">super</span>.report();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"我手下员工的情况"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Employee e: subEmployees) &#123;</span><br><span class="line">            e.report();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="leaf："><a href="#leaf：" class="headerlink" title="leaf："></a>leaf：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Staff</span> <span class="keyword">extends</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Staff</span><span class="params">(String name, String position, String salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, position, salary);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">report</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.report();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其它类基本就没有变化，看leaf类就知道，没有空实现，这就是安全模式的实现，也是编程中推荐的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;组合模式也叫合成模式，有时也叫整体-部分模式，是用来描述整体和部分关系的。和树的形成非常像，树有根节点，子节点，叶结点。而组合模式呢有，&lt;strong&gt;Component，Composite，Leaf&lt;/strong&gt;，当然不是严格意义上的一一对应，不过也差不多。
    
    </summary>
    
    
      <category term="设计模式" scheme="https://imperfect.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="进阶" scheme="https://imperfect.top/tags/%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>适配器模式【java设计模式】</title>
    <link href="https://imperfect.top/posts/5d04d107.html"/>
    <id>https://imperfect.top/posts/5d04d107.html</id>
    <published>2020-04-13T21:26:14.000Z</published>
    <updated>2020-05-02T14:04:43.193Z</updated>
    
    <content type="html"><![CDATA[<p>适配器模式就是把两个不相关的东西适配起来，最常见的就是充电协议之间，充电口之间的适配；外设与电脑之间的适配，也就是比较出名的扩展坞；还有比如酒店只有三口插口，而我们的手机充电器是两口的，这时候也需要适配器来帮我们解决难题。<a id="more"></a></p><p><strong>场景：</strong>很简单，想把苹果的lightning充电接口输出为安卓中很流行的type-c接口，假设lightning和type-c的充电协议是不一样的。上网查了下，没有查到所以然，虽然觉得应该不一样，但是严谨一点假设不一样。</p><h3 id="苹果协议："><a href="#苹果协议：" class="headerlink" title="苹果协议："></a>苹果协议：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AppleProtocol</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">chargeWithAppleProtocol</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lightning充电接口："><a href="#lightning充电接口：" class="headerlink" title="lightning充电接口："></a>lightning充电接口：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lightning</span> <span class="keyword">implements</span> <span class="title">AppleProtocol</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">chargeWithAppleProtocol</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"给lightning接口的电器充电"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="USB协议："><a href="#USB协议：" class="headerlink" title="USB协议："></a>USB协议：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">USBProtocol</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">chargeWithUSBProtocol</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Type-C充电接口"><a href="#Type-C充电接口" class="headerlink" title="Type-C充电接口"></a>Type-C充电接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeC</span> <span class="keyword">implements</span> <span class="title">USBProtocol</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">chargeWithUSBProtocol</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"给typeC接口的电器充电"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个接口之间很明显是不能直接转换的，所以需要一个适配器来帮我们适配一下。<strong>实现适配器模式有三种方式，分别是类适配器模式，对象适配器模式，接口适配器模式</strong>。但是所有的适配器都只有一个目的，那就是<strong>src–&gt;adapter–&gt;target</strong>。</p><p>但是，如何理解这个转换呢，我不知道各位小伙伴一看到这个是否真的理解了，我是看来好多篇文章才知道是怎么回事。就拿本文的例子举例，要把lightning（src）–&gt; adapter –&gt; 符合usb充电协议的接口（target）。具体就是原本macbook只接受lighting接口（src）的充电器充电，但是有了adapter后，也可以用typeC（target）给mackbook充电。再详细一点就是有两种说法：</p><ul><li>适配器把lightning接口（被适配类）适配成了typeC</li><li>typeC可以直接给mackbook充电。</li></ul><h3 id="类适配器模式："><a href="#类适配器模式：" class="headerlink" title="类适配器模式："></a>类适配器模式：</h3><p>简单来说，就是通过继承方式来继承类.</p><h4 id="Adapter："><a href="#Adapter：" class="headerlink" title="Adapter："></a>Adapter：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">Lightning</span> <span class="keyword">implements</span> <span class="title">USBProtocol</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//适配器内部就把两个不相关的类结合在一起</span></span><br><span class="line">    <span class="comment">//实现了通过usb协议能够给lightning接口的机器充电</span></span><br><span class="line">    <span class="comment">//也就是把lightning适配成了usb协议</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">chargeWithUSBProtocol</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        chargeWithAppleProtocol();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Client："><a href="#Client：" class="headerlink" title="Client："></a>Client：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        USBProtocol typeC = <span class="keyword">new</span> TypeC();</span><br><span class="line">        System.out.println(<span class="string">"未使用适配器："</span>);</span><br><span class="line">        typeC.chargeWithUSBProtocol();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"----------------------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"使用适配器之后"</span>);</span><br><span class="line">        </span><br><span class="line">        typeC = <span class="keyword">new</span> Adapter();</span><br><span class="line">        typeC.chargeWithUSBProtocol();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="1.png" alt=""></p><p>这里再啰嗦一次，typeC接口再没有适配器之前，只能<strong>给typeC接口充电</strong>，但是经过适配器之后，由于lightning接口已经被适配器给适配成了符合USB充电协议的接口，所以typeC也能够<strong>给lightning接口充电</strong>。</p><h3 id="对象适配器模式："><a href="#对象适配器模式：" class="headerlink" title="对象适配器模式："></a>对象适配器模式：</h3><p>不通过继承来实现，而是通过对象的组合来实现。</p><h4 id="Adapter"><a href="#Adapter" class="headerlink" title="Adapter:"></a>Adapter:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter1</span> <span class="keyword">implements</span> <span class="title">USBProtocol</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需要适配的对象</span></span><br><span class="line">    Lightning lightning;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Adapter1</span><span class="params">(Lightning lightning)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lightning = lightning;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//被适配对象和目标接口的内部结合</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">chargeWithUSBProtocol</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lightning.chargeWithAppleProtocol();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Client：-1"><a href="#Client：-1" class="headerlink" title="Client："></a>Client：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;    </span><br><span class="line">        USBProtocol typeC = <span class="keyword">new</span> Adapter1(<span class="keyword">new</span> Lightning());</span><br><span class="line">        typeC.chargeWithUSBProtocol();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="2.png" alt=""></p><p>这样就不用通过继承来实现适配，值得一提的是，上面说过可以<strong>组合</strong>，也就是说，需要适配的对象可以不止一个，可以多个，然后在<code>public void chargeWithUSBProtocol() {}</code>中再决定调用哪一些。</p><h3 id="接口适配器模式（缺省适配器）："><a href="#接口适配器模式（缺省适配器）：" class="headerlink" title="接口适配器模式（缺省适配器）："></a>接口适配器模式（缺省适配器）：</h3><p>怎么说呢，现在如果我们去购买扩展坞的话，是不是它已经继承了很多接口适配，不仅有lightning转type-c，也有type-a转type-c。扩展坞就是适配器嘛，这样就是要再适配器类内实现所有的接口，但是在这个例子中我们只要lightning转type-c怎么办呢。自然而然的就想到了首先有个<strong>接口类</strong>，接着有<strong>抽象适配器类</strong>，然后再实现<strong>具体的适配器类</strong>，各个适配器类互不干扰，只实现了某个具体的接口，这就是接口适配器模式。</p><h4 id="适配器接口："><a href="#适配器接口：" class="headerlink" title="适配器接口："></a>适配器接口：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ChargeAdapter</span> </span>&#123;</span><br><span class="line"><span class="comment">//把某个接口适配成USB协议</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">chargeWithUSB</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//把某个接口是配成Apple协议</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">chargeWithApple</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//同样</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">chargeWithOthers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="抽象适配器："><a href="#抽象适配器：" class="headerlink" title="抽象适配器："></a>抽象适配器：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractAdapter</span> <span class="keyword">implements</span> <span class="title">ChargeAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">chargeWithUSB</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">chargeWithApple</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">chargeWithOthers</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般抽象适配器类的实现我都不写的，因为在具体的适配器类中还要重写这些方法。还是拿lightning转typeC举例，还记得吗，lightning是被适配对象（adaptee），typeC是目标接口。所以要重写的是<code>public void chargeWithUSB() {}</code>方法哦。</p><h4 id="具体适配器："><a href="#具体适配器：" class="headerlink" title="具体适配器："></a>具体适配器：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lightning2USB</span> <span class="keyword">extends</span> <span class="title">AbstractAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">//被适配的对象</span></span><br><span class="line">    Lightning lightning;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Lightning2USB</span><span class="params">(Lightning lightning)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lightning = lightning;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//适配器内部工作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">chargeWithUSB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lightning.chargeWithAppleProtocol();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Client"><a href="#Client" class="headerlink" title="Client:"></a>Client:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ChargeAdapter adapter = <span class="keyword">new</span> Lightning2USB(<span class="keyword">new</span> Lightning());</span><br><span class="line">        adapter.chargeWithUSB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，三种适配器模式都讲完了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;适配器模式就是把两个不相关的东西适配起来，最常见的就是充电协议之间，充电口之间的适配；外设与电脑之间的适配，也就是比较出名的扩展坞；还有比如酒店只有三口插口，而我们的手机充电器是两口的，这时候也需要适配器来帮我们解决难题。
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>策略模式【java设计模式】</title>
    <link href="https://imperfect.top/posts/3c78d04c.html"/>
    <id>https://imperfect.top/posts/3c78d04c.html</id>
    <published>2020-04-12T16:26:01.000Z</published>
    <updated>2020-05-02T14:04:43.156Z</updated>
    
    <content type="html"><![CDATA[<p>策略模式就是一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。</p><p>当然这是官方的说法，通俗来讲呢，就是有不同的策略给你选择，前提是你必须<strong>知道所有策略</strong>。<a id="more"></a>打游戏不同形式有不同的策略；去学校不同情况也有不同的策略，可以走路，可以骑自行车，可以坐公交；公司在发展的不同阶段也有不同的策略，这些都是策略模式的缩影。</p><p><strong>场景：</strong>在kpl赛场赛，两只队伍正在互相竞争，教练赛前已经做好了三种策略，分别在前中后三个时间段给出指挥，帮助队伍取胜。</p><h3 id="抽象策略类："><a href="#抽象策略类：" class="headerlink" title="抽象策略类："></a>抽象策略类：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractStrategy</span> </span>&#123;</span><br><span class="line">    <span class="comment">//发起进攻</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前期策略："><a href="#前期策略：" class="headerlink" title="前期策略："></a>前期策略：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EarlyGame</span> <span class="keyword">extends</span> <span class="title">AbstractStrategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"教练：集合入侵野区，控制经济，掌握节奏"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中期策略："><a href="#中期策略：" class="headerlink" title="中期策略："></a>中期策略：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MidGame</span> <span class="keyword">extends</span> <span class="title">AbstractStrategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"教练：抓住优势集合打团，能一波就一波，不要拖"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后期策略："><a href="#后期策略：" class="headerlink" title="后期策略："></a>后期策略：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LaterGame</span> <span class="keyword">extends</span> <span class="title">AbstractStrategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"教练：中路线留着，带边线让三路线同时到高低，准备一波"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比赛上有了策略还不行呀，还得有个教练（<strong>context</strong>）来指挥，就是上下文。策略模式的重点就是封装角色（在本例中就是教练），它是借用了代理模式的思路。差别就是策略模式封装的角色和策略不是同一个接口，如果是同一个接口，那就成了代理模式。</p><h3 id="教练："><a href="#教练：" class="headerlink" title="教练："></a>教练：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coach</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//具体要执行的策略是什么</span></span><br><span class="line">    AbstractStrategy strategy;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Coach</span><span class="params">(AbstractStrategy strategy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指挥队员作战</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">command</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        strategy.attack();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好，教练就位，对策也有了，接下来就开始我们的比赛。</p><h3 id="Game："><a href="#Game：" class="headerlink" title="Game："></a>Game：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Coach coach;</span><br><span class="line">        System.out.println(<span class="string">"主持人：本届kpl比赛正是开始"</span>);</span><br><span class="line">        System.out.println(<span class="string">"主持人：现在是游戏的前期"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//教练看了看游戏的前期策略, 并且指挥</span></span><br><span class="line">        coach = <span class="keyword">new</span> Coach(<span class="keyword">new</span> EarlyGame());</span><br><span class="line">        coach.command();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"----------------------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"主持人：游戏进行到了中期，蓝方占有优势"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//教练一看有优势，又看了看游戏策略</span></span><br><span class="line">        coach = <span class="keyword">new</span> Coach(<span class="keyword">new</span> MidGame());</span><br><span class="line">        coach.command();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"----------------------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"主持人：已经到了游戏的后期"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//教练一点都不慌，拿出了最后的策略</span></span><br><span class="line">        coach = <span class="keyword">new</span> Coach(<span class="keyword">new</span> LaterGame());</span><br><span class="line">        coach.command();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"----------------------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"主持人：游戏结束，让我们恭喜imperfect战队"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h3><p><img src="1.png" alt=""></p><h3 id="优缺点："><a href="#优缺点：" class="headerlink" title="优缺点："></a>优缺点：</h3><ul><li><strong>优点：</strong><ul><li>算法可以自由切换，只要实现了抽象策略，就可以称为策略家族的成员。</li><li>扩展性好，如果想要多一个策略，直接再加一个类就好了，其它类完全可以不改动。</li></ul></li><li><strong>缺点：</strong><ul><li>策略类数量增多，上面说的扩展性好，但是复用性不好啊，一个策略用了之后，复用的可能性就很低了嘛。</li><li>所有的策略类都需要对外暴露，借上面例子，教练肯定需要知道所有的策略呀，不然怎么临场指挥取得胜利呢。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;策略模式就是一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。&lt;/p&gt;
&lt;p&gt;当然这是官方的说法，通俗来讲呢，就是有不同的策略给你选择，前提是你必须&lt;strong&gt;知道所有策略&lt;/strong&gt;。
    
    </summary>
    
    
      <category term="设计模式" scheme="https://imperfect.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="进阶" scheme="https://imperfect.top/tags/%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>装饰模式【java设计模式】</title>
    <link href="https://imperfect.top/posts/40e22b02.html"/>
    <id>https://imperfect.top/posts/40e22b02.html</id>
    <published>2020-04-11T13:35:41.000Z</published>
    <updated>2020-05-02T14:04:43.172Z</updated>
    
    <content type="html"><![CDATA[<p>装饰模式嘛，就是把一个东西装饰一下，包装一下，做到扬长避短。</p><p><strong>场景：</strong>前不久发布了红米k30系列，不知道大家有没有关注，在当今90hz屏幕满天飞的情况下，红米的新手机还是60hz，不免让人觉得可惜。（参数和价格不一定准确，各位小伙伴体谅下<a id="more"></a></p><h3 id="普通模式："><a href="#普通模式：" class="headerlink" title="普通模式："></a>普通模式：</h3><h4 id="抽象手机类："><a href="#抽象手机类：" class="headerlink" title="抽象手机类："></a>抽象手机类：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">NMobile</span> </span>&#123;</span><br><span class="line">    <span class="comment">//产品名字</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NMobile</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">showDetails</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">onSale</span><span class="params">(String userName)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="具体手机类："><a href="#具体手机类：" class="headerlink" title="具体手机类："></a>具体手机类：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NRedmi</span> <span class="keyword">extends</span> <span class="title">NMobile</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NRedmi</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showDetails</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"处理器：骁龙865 \r\n 拍照：6400w像素 \r\n 屏幕：60hz \r\n 充电：40w"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSale</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        System.out.println(userName + <span class="string">"购买了"</span> + getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="用户类："><a href="#用户类：" class="headerlink" title="用户类："></a>用户类：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NUser</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//手机发布会，展示了细节</span></span><br><span class="line">        NMobile mobile = <span class="keyword">new</span> NRedmi(<span class="string">"红米k30p"</span>);</span><br><span class="line">        mobile.showDetails();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//用户看到后，觉得不尽人意，没有购买</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h4><p><img src="1.png" alt=""></p><p>这确实没什么吸引力吼，处理器今年的中高端的手机都用上了，拍照也一般，充电虽然中上，但是架不住屏幕只有60hz啊，对客户没有吸引力。所以怎样展示手机，扬长避短，这就是需要我们对手机参数进行<strong>装饰</strong>一下了。可以在介绍屏幕刷新率之前，说一下屏幕的其它优点，还有就是，虽然配置不是顶级的，但是我们的价格低呀，性价比高呀。这样一说，大家都知道需要两个装饰类了叭，一个是装饰价格，一个是装饰屏幕。</p><h3 id="装饰模式："><a href="#装饰模式：" class="headerlink" title="装饰模式："></a>装饰模式：</h3><p><strong>抽象手机和具体手机不变，和上面一样</strong></p><h4 id="抽象装饰类："><a href="#抽象装饰类：" class="headerlink" title="抽象装饰类："></a>抽象装饰类：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">extends</span> <span class="title">Mobile</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把要装饰的手机拿给我</span></span><br><span class="line">    <span class="keyword">private</span> Mobile mobile;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Decorator</span><span class="params">(String name, Mobile mobile)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.mobile = mobile;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//细节还是要展示的</span></span><br><span class="line">    <span class="comment">//只不过怎么展示呢，子类可以加以修饰</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showDetails</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mobile.showDetails();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//手机也是要出售的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSale</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        mobile.onSale(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，我们手机的细节还是要展示的，不能说做的不好就不说出来，欺骗消费者。同样，不能说60hz的要说成90hz的。化了妆，能把你认出来叫化妆，不能把你认出来叫整容，我们讲的是装饰模式，不是整容模式。</p><h4 id="屏幕装饰类："><a href="#屏幕装饰类：" class="headerlink" title="屏幕装饰类："></a>屏幕装饰类：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScreenDecorator</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ScreenDecorator</span><span class="params">(String name, Mobile mobile)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, mobile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//装饰屏幕</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decorateScreen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"大猩猩五代玻璃，2k+amoled屏幕，可以通过固件补帧"</span>);</span><br><span class="line">        System.out.println(<span class="string">"可能做了一个错误的决定，希望大家能原谅"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showDetails</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//想先介绍了屏幕的优点，再说其他参数</span></span><br><span class="line">        decorateScreen();</span><br><span class="line">        <span class="keyword">super</span>.showDetails();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="价格修饰类："><a href="#价格修饰类：" class="headerlink" title="价格修饰类："></a>价格修饰类：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PriceDecorator</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PriceDecorator</span><span class="params">(String name, Mobile mobile)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, mobile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//公布价格</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decoratePrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"8 + 128：2999"</span>);</span><br><span class="line">        System.out.println(<span class="string">"8 + 256: 3199"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showDetails</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.showDetails();</span><br><span class="line">        <span class="comment">//介绍完其它的后，公布性价比较高的价格</span></span><br><span class="line">        decoratePrice();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="用户类：-1"><a href="#用户类：-1" class="headerlink" title="用户类："></a>用户类：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//手机发布会，原产品</span></span><br><span class="line">        Mobile mobile = <span class="keyword">new</span> Redmi(<span class="string">"红米k30p"</span>);</span><br><span class="line">        <span class="comment">//装饰下屏幕</span></span><br><span class="line">        mobile = <span class="keyword">new</span> ScreenDecorator(mobile.getName(), mobile);</span><br><span class="line">        <span class="comment">//装饰下价格</span></span><br><span class="line">        mobile = <span class="keyword">new</span> PriceDecorator(mobile.getName(), mobile);</span><br><span class="line">        mobile.showDetails();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用户一看，诶，不错不错，买了</span></span><br><span class="line">        mobile.onSale(<span class="string">"imperfect"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出：-1"><a href="#输出：-1" class="headerlink" title="输出："></a>输出：</h4><p><img src="2.png" alt=""></p><p>这样是不是相对来说好看一点了呢，先来就给你一个讲解屏幕多好，然后再抛出60hz。虽然低，但是用户感觉，诶，之前说的屏幕那么好，60hz将就忍一下叭。最后再公布价格，这么便宜，真香啊，大手一挥买下了红米k30pro。这是一种营销策略，同样也是我们这篇博客要讲的装饰模式。</p><h3 id="优缺点："><a href="#优缺点：" class="headerlink" title="优缺点："></a>优缺点：</h3><ul><li><strong>优点：</strong><ul><li>装饰类和被装饰类可以独立发展，而不会相互耦合，什么意思呢，就是，就算你是90hz的，我一样装饰说这是大猩猩五代玻璃，2k+amoled屏幕；</li><li>装饰模式是继承关系的一个替代方案，不管你装饰了多少，还是is-a的关系，手机还是手机，不可能装饰后变成了飞机。</li><li>装饰模式可以动态地扩张一个实现类的功能。</li></ul></li><li><strong>缺点：</strong>如果装饰多了就比较复杂，就像你化妆，如果快弄好了，发现第一步好像错了，不将就的情况下是不是就要重新来一变。所以我们在开发的时候应该尽量减少装饰类的数量。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;装饰模式嘛，就是把一个东西装饰一下，包装一下，做到扬长避短。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;场景：&lt;/strong&gt;前不久发布了红米k30系列，不知道大家有没有关注，在当今90hz屏幕满天飞的情况下，红米的新手机还是60hz，不免让人觉得可惜。（参数和价格不一定准确，各位小伙伴体谅下
    
    </summary>
    
    
      <category term="设计模式" scheme="https://imperfect.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="进阶" scheme="https://imperfect.top/tags/%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>责任链模式【java设计模式】</title>
    <link href="https://imperfect.top/posts/1a681e4a.html"/>
    <id>https://imperfect.top/posts/1a681e4a.html</id>
    <published>2020-04-10T17:16:45.000Z</published>
    <updated>2020-05-02T14:04:43.190Z</updated>
    
    <content type="html"><![CDATA[<p>责任链模式可以拆分为责任和链，责任是指有责任去干嘛，链可以参考链表嘛，有下一级。<a id="more"></a></p><p><strong>场景</strong>：现在你是某公司的员工，拿到了一个比较紧急的文件（文件的紧急性肯定不一样嘛），需要更高一层的领导来处理下文件。</p><h3 id="普通模式："><a href="#普通模式：" class="headerlink" title="普通模式："></a>普通模式：</h3><h4 id="文件类："><a href="#文件类：" class="headerlink" title="文件类："></a>文件类：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> FileClass fileClass;<span class="comment">//文件的重要等级</span></span><br><span class="line">    <span class="keyword">private</span> String content;<span class="comment">//文件的内容</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">File</span><span class="params">(FileClass fileClass, String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fileClass = fileClass;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FileClass <span class="title">getFileClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fileClass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//枚举类表示文件的重要等级</span></span><br><span class="line"><span class="keyword">enum</span> FileClass &#123;</span><br><span class="line">    NORMAL,</span><br><span class="line">    IMPORTANT,</span><br><span class="line">    EMERGENCY</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="员工接口："><a href="#员工接口：" class="headerlink" title="员工接口："></a>员工接口：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IStaff</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取员工的名字</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取要处理文件的等级</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FileClass <span class="title">getFileClass</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取员工的需求</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRequest</span><span class="params">()</span></span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="员工："><a href="#员工：" class="headerlink" title="员工："></a>员工：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Staff</span> <span class="keyword">implements</span> <span class="title">IStaff</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> File file;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Staff</span><span class="params">(File file, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.file = file;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FileClass <span class="title">getFileClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> file.getFileClass();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"这份文件【"</span> + file.getContent() +<span class="string">"】需要处理下"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="领导接口："><a href="#领导接口：" class="headerlink" title="领导接口："></a>领导接口：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">//处理文件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(IStaff staff)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="组长："><a href="#组长：" class="headerlink" title="组长："></a>组长：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Leader</span> <span class="keyword">implements</span> <span class="title">IHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(IStaff staff)</span> </span>&#123;</span><br><span class="line">        System.out.println(staff.getName() + <span class="string">": "</span> + staff.getRequest());</span><br><span class="line">        System.out.println(<span class="string">"组长：现在处理"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总监："><a href="#总监：" class="headerlink" title="总监："></a>总监：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> <span class="keyword">implements</span> <span class="title">IHandler</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(IStaff staff)</span> </span>&#123;</span><br><span class="line">        System.out.println(staff.getName() + <span class="string">": "</span> + staff.getRequest());</span><br><span class="line">        System.out.println(<span class="string">"总监：现在处理"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="主管："><a href="#主管：" class="headerlink" title="主管："></a>主管：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Supervisor</span> <span class="keyword">implements</span> <span class="title">IHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(IStaff staff)</span> </span>&#123;</span><br><span class="line">        System.out.println(staff.getName() + <span class="string">": "</span> + staff.getRequest());</span><br><span class="line">        System.out.println(<span class="string">"主管：现在处理"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Client："><a href="#Client：" class="headerlink" title="Client："></a>Client：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(FileClass.IMPORTANT, <span class="string">"策划方案"</span>);</span><br><span class="line">        IStaff staff = <span class="keyword">new</span> Staff(file, <span class="string">"imperfect"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(file.getFileClass().equals(FileClass.NORMAL)) &#123;</span><br><span class="line">            <span class="keyword">new</span> Leader().handle(staff);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(file.getFileClass().equals(FileClass.IMPORTANT)) &#123;</span><br><span class="line">            <span class="keyword">new</span> Director().handle(staff);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(file.getFileClass().equals(FileClass.EMERGENCY)) &#123;</span><br><span class="line">            <span class="keyword">new</span> Supervisor().handle(staff);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"权限不够"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h4><p><img src="1.png" alt=""></p><p>你瞅瞅，仔细品，这一堆if else直接在Client类给暴露出来了，而且是在Client中才进行判断不同等级给不同的领导处理。通俗地比喻呢，就是员工拿到了文件后，把自己的组长，总监，主管全都叫到自己跟前，然后说，这份文件是比较重要的，给你们谁处理才有权限。确实是可以完成人物，但是这样的方式现实吗？</p><p>接近现实的一种方式是怎么样的呢，员工拿到文件后，首先给自己的直接领导组长，在领导层（<strong>handler</strong>）中的最低的一层（<strong>链头</strong>）。接着组长再看自己有没有<strong>责任</strong>去处理文件，没有的话再给下一层来处理，这就是<strong>责任链模式</strong>。</p><h3 id="责任链模式："><a href="#责任链模式：" class="headerlink" title="责任链模式："></a>责任链模式：</h3><p>文件类和员工类不变，主要是领导层（handler）的变化。</p><h4 id="抽象领导类："><a href="#抽象领导类：" class="headerlink" title="抽象领导类："></a>抽象领导类：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> FileClass fileClass;</span><br><span class="line">    <span class="keyword">private</span> AbstractHandler nextHandler;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在类构造的时候就明确了职责</span></span><br><span class="line">    <span class="comment">//就像你入职就知道自己的责任是处理什么文件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractHandler</span><span class="params">(FileClass fileClass, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fileClass = fileClass;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取得领导的名字</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//没有责任，交给下一级</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNextHandler</span><span class="params">(AbstractHandler nextHandler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nextHandler = nextHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理回应，每个人的回应方式不一样，所以抽象出来</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">respond</span><span class="params">(IStaff staff)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(IStaff staff)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(fileClass.equals(staff.getFileClass())) &#123;</span><br><span class="line">            respond(staff);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(nextHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">                nextHandler.respond(staff);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"已经到最高权限！！！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>各位小伙伴可以仔细看看处理信息的方法，有没有感觉到什么，仔细品品，是不是用到了之前讲到的“模板方法模式”。</p><h4 id="组长：-1"><a href="#组长：-1" class="headerlink" title="组长："></a>组长：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Leader</span> <span class="keyword">extends</span> <span class="title">AbstractHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Leader</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(FileClass.NORMAL, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">respond</span><span class="params">(IStaff staff)</span> </span>&#123;</span><br><span class="line">        System.out.println(staff.getName() + <span class="string">": "</span> + staff.getRequest());</span><br><span class="line">        System.out.println(getName() + <span class="string">"组长：做出了回应"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总监：-1"><a href="#总监：-1" class="headerlink" title="总监："></a>总监：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> <span class="keyword">extends</span> <span class="title">AbstractHandler</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Director</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(FileClass.IMPORTANT, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">respond</span><span class="params">(IStaff staff)</span> </span>&#123;</span><br><span class="line">        System.out.println(staff.getName() + <span class="string">": "</span> + staff.getRequest());</span><br><span class="line">        System.out.println(getName() + <span class="string">"总监：做出了回应"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="主管：-1"><a href="#主管：-1" class="headerlink" title="主管："></a>主管：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Supervisor</span> <span class="keyword">extends</span> <span class="title">AbstractHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Supervisor</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(FileClass.EMERGENCY, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">respond</span><span class="params">(IStaff staff)</span> </span>&#123;</span><br><span class="line">        System.out.println(staff.getName() + <span class="string">": "</span> + staff.getRequest());</span><br><span class="line">        System.out.println(getName() + <span class="string">"主管：做出了回应"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Client：-1"><a href="#Client：-1" class="headerlink" title="Client："></a>Client：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(FileClass.IMPORTANT, <span class="string">"营销方案"</span>);</span><br><span class="line">        IStaff staff = <span class="keyword">new</span> Staff(file, <span class="string">"imperfect"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建领导层</span></span><br><span class="line">        AbstractHandler leader = <span class="keyword">new</span> Leader(<span class="string">"leaderWu"</span>);</span><br><span class="line">        AbstractHandler director = <span class="keyword">new</span> Director(<span class="string">"directorWu"</span>);</span><br><span class="line">        AbstractHandler supervisor = <span class="keyword">new</span> Supervisor(<span class="string">"supervisorWu"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置层级关系，跟链表类似</span></span><br><span class="line">        leader.setNextHandler(director);</span><br><span class="line">        director.setNextHandler(supervisor);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//首先交给直接领导处理</span></span><br><span class="line">        leader.handle(staff);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出：-1"><a href="#输出：-1" class="headerlink" title="输出："></a>输出：</h4><p><img src="2.png" alt=""></p><h3 id="优缺点："><a href="#优缺点：" class="headerlink" title="优缺点："></a>优缺点：</h3><ul><li><strong>优点：</strong>处理和请求分开，员工不知道最终文件是谁处理的</li><li><strong>缺点：</strong>缺点也十分明显，如果责任链很长，而处理者刚好在最后，是不是要遍历玩责任链。这样性能就比较低，在实际使用中，一般会折这一个最大链长来保证性能。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;责任链模式可以拆分为责任和链，责任是指有责任去干嘛，链可以参考链表嘛，有下一级。
    
    </summary>
    
    
      <category term="设计模式" scheme="https://imperfect.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="进阶" scheme="https://imperfect.top/tags/%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>命令模式【java设计模式】</title>
    <link href="https://imperfect.top/posts/43059ff9.html"/>
    <id>https://imperfect.top/posts/43059ff9.html</id>
    <published>2020-04-09T18:07:08.000Z</published>
    <updated>2020-05-02T14:04:43.122Z</updated>
    
    <content type="html"><![CDATA[<p>命令模式，一句话就是给你一个命令，必须要遵守并且执行，有点像是军队里面“服从命令是军人的天职”。</p><p>不知道大学有没有参加过数学建模，反正我是没有参加过，但是有了解过一般构成，一个小队里面一般有主要负责<strong>搜索的同学，写代码的同学，写论文的同学和指导老师</strong></p><h3 id="普通模式："><a href="#普通模式：" class="headerlink" title="普通模式："></a>普通模式：</h3><h4 id="抽象成员类-receiver-："><a href="#抽象成员类-receiver-：" class="headerlink" title="抽象成员类(receiver)："></a>抽象成员类(receiver)：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">NTeammate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">changeRequire</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Searcher"><a href="#Searcher" class="headerlink" title="Searcher:"></a>Searcher:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NSearcher</span> <span class="keyword">extends</span> <span class="title">NTeammate</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeRequire</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"searcher 了解到需求改变"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"searcher 开始搜索相关信息"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Writer"><a href="#Writer" class="headerlink" title="Writer:"></a>Writer:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NWriter</span> <span class="keyword">extends</span> <span class="title">NTeammate</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeRequire</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"writer 了解到需求改变"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"writer 修改论文"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"writer 开始写论文"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Coder"><a href="#Coder" class="headerlink" title="Coder:"></a>Coder:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NCoder</span> <span class="keyword">extends</span> <span class="title">NTeammate</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeRequire</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"coder 了解到需求改变"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"coder 修改代码"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"coder 开始码代码"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Teacher"><a href="#Teacher" class="headerlink" title="Teacher:"></a>Teacher:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NTeacher</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        NTeammate writer = <span class="keyword">new</span> NWriter();</span><br><span class="line">        <span class="comment">//需要改文章了</span></span><br><span class="line">        writer.modify();</span><br><span class="line">        writer.work();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一开始，老师看到写的文展不够简洁，所以就打电话给writer，让他修改，所以就有了上面的Teacher类。这样其实还好，因为文章嘛，修改润色就好了。</p><p>过了一天，老师仔细看了下后，发现代码的算法有bug，这个漏洞导致了不仅coder要修改代码，writer也要修改相应地方的文章。老师这下不仅要练习writer，也得练习coder，那么Teacher类应该怎么修改呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NTeacher</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        NTeammate writer = <span class="keyword">new</span> NWriter();</span><br><span class="line">        NTeammate coder = <span class="keyword">new</span> NCoder();</span><br><span class="line">        <span class="comment">//需要改bug和文章了</span></span><br><span class="line">        writer.modify();</span><br><span class="line">        writer.work();</span><br><span class="line">        </span><br><span class="line">        coder.modify();</span><br><span class="line">        coder.work();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h4><p><img src="1.png" alt=""></p><p>可以发现，就多了一个需求，代码较之前已经有很大的改动了，这是我们不希望看到的。可能有的小伙伴会想到利用中介者模式，不过中介者模式是为了减小类和类之间的耦合，这个例子中的searcher，writer，coder并没有耦合，都在各司其职。</p><h3 id="命令模式："><a href="#命令模式：" class="headerlink" title="命令模式："></a>命令模式：</h3><p>如果小队里面有个队长（<strong>Invoker</strong>）就好了，可以和老师（<strong>client</strong>）沟通，不止这样，老师的指令实现起来肯定是String类型，我们可以把指令封装称一个类（<strong>command</strong>），队长只需要发布命令，命令指示队员（<strong>receiver</strong>）来做什么。这就是命令模式，队员必须执行命令要求做的。</p><p>抽象队员以及具体队员还是和上面一样，这里就不再赘述。</p><h4 id="抽象命令类："><a href="#抽象命令类：" class="headerlink" title="抽象命令类："></a>抽象命令类：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractCommand</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Coder coder = <span class="keyword">new</span> Coder();</span><br><span class="line">    <span class="keyword">protected</span> Searcher searcher = <span class="keyword">new</span> Searcher();</span><br><span class="line">    <span class="keyword">protected</span> Writer writer = <span class="keyword">new</span> Writer();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//一定要有个执行的方法，下达一个命令</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="具体命令类-Command-："><a href="#具体命令类-Command-：" class="headerlink" title="具体命令类(Command)："></a>具体命令类(Command)：</h4><p>有哪些命令，都可以封装起来</p><h5 id="改变需求："><a href="#改变需求：" class="headerlink" title="改变需求："></a>改变需求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChangeInfoCommand</span> <span class="keyword">extends</span> <span class="title">AbstractCommand</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        searcher.changeRequire();</span><br><span class="line">        writer.changeRequire();</span><br><span class="line">        coder.changeRequire();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="修改文章："><a href="#修改文章：" class="headerlink" title="修改文章："></a>修改文章：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModifyArticleCommand</span> <span class="keyword">extends</span> <span class="title">AbstractCommand</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        writer.modify();</span><br><span class="line">        writer.work();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="修改代码："><a href="#修改代码：" class="headerlink" title="修改代码："></a>修改代码：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModifyCodeCommand</span> <span class="keyword">extends</span> <span class="title">AbstractCommand</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        coder.modify();</span><br><span class="line">        coder.work();</span><br><span class="line">        writer.modify();</span><br><span class="line">        writer.work();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="队长类-Invoke-："><a href="#队长类-Invoke-：" class="headerlink" title="队长类(Invoke)："></a>队长类(Invoke)：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Captain</span> </span>&#123;</span><br><span class="line">    <span class="comment">//和命令产生联系</span></span><br><span class="line">    AbstractCommand abstractCommand;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Captain</span><span class="params">(AbstractCommand abstractCommand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.abstractCommand = abstractCommand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//发布命令要求队员进行相应的动作</span></span><br><span class="line">        abstractCommand.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="老师类-Client-："><a href="#老师类-Client-：" class="headerlink" title="老师类(Client)："></a>老师类(Client)：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AbstractCommand command = <span class="keyword">new</span> ModifyCodeCommand();</span><br><span class="line">        Captain captain = <span class="keyword">new</span> Captain(command);</span><br><span class="line">        captain.invoke();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出：-1"><a href="#输出：-1" class="headerlink" title="输出："></a>输出：</h4><p><img src="2.png" alt=""></p><p>如果老师觉得又不好了，这些怎么办呢，没有必要和成员练习，只需要提出另外一个建议，队长也不要跟队员练习，只需要发布命令，由命令指示队员去做。修改就是这么简单，一行代码的事情。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//AbstractCommand command = new ModifyCodeCommand();</span></span><br><span class="line">        AbstractCommand command = <span class="keyword">new</span> ModifyArticleCommand();</span><br><span class="line">        Captain captain = <span class="keyword">new</span> Captain(command);</span><br><span class="line">        captain.invoke();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="扩展："><a href="#扩展：" class="headerlink" title="扩展："></a>扩展：</h3><p>如果说，诶，改代码的时候不仅需要修改bug和修正文章，也需要searcher来搜集信息，怎么办呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModifyCodeCommand</span> <span class="keyword">extends</span> <span class="title">AbstractCommand</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        searcher.work();<span class="comment">//只需要在具体的命令里面添加即可，客户端是完全不知道的</span></span><br><span class="line">        coder.modify();</span><br><span class="line">        coder.work();</span><br><span class="line">        writer.modify();</span><br><span class="line">        writer.work();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一种情况就是，某些修改之后，老师发现还是之前的版本比较好，这就要求每个队员都有一个回调函数来撤销动作，返回到上一个状态，就是找到保存的之前版本的文件。<strong>只需要在抽象receiver类加一个回调函数即可</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">NTeammate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">changeRequire</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//具体队友在根据自己的方式实现回调方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着就是添加一个<strong>撤回命令</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">callBackCommand</span> <span class="keyword">extends</span> <span class="title">AbstractCommand</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//当然，需要谁撤回是可以改变的</span></span><br><span class="line">        searcher.rollback();</span><br><span class="line">        writer.rollback();</span><br><span class="line">        coder.rollback();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UML类图："><a href="#UML类图：" class="headerlink" title="UML类图："></a>UML类图：</h3><p><img src="3.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;命令模式，一句话就是给你一个命令，必须要遵守并且执行，有点像是军队里面“服从命令是军人的天职”。&lt;/p&gt;
&lt;p&gt;不知道大学有没有参加过数学建模，反正我是没有参加过，但是有了解过一般构成，一个小队里面一般有主要负责&lt;strong&gt;搜索的同学，写代码的同学，写论文的同学和指导老
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://imperfect.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="进阶" scheme="https://imperfect.top/tags/%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>中介者模式【java设计模式】</title>
    <link href="https://imperfect.top/posts/a042aa34.html"/>
    <id>https://imperfect.top/posts/a042aa34.html</id>
    <published>2020-04-08T16:07:08.000Z</published>
    <updated>2020-05-02T14:04:43.112Z</updated>
    
    <content type="html"><![CDATA[<p>中介者模式又称调停模式，在我们现实生活中也会又很多中介者的存在，房屋中介者，合同中介者，在java中的中介者模式又会是什么样子的呢。<a id="more"></a></p><p>现在有个这样的需求，moba类竞技游戏一般来说有五个位置，打野，法术输出，物理输出，辅助，坦克。为了简便呢，就拿三个位置来看。法师自己可以消耗，但是也会请求支援，打野呢，除了打野怪之外也要去gank，辅助要给大家占视野，同时也要回城补状态。</p><h3 id="普通模式"><a href="#普通模式" class="headerlink" title="普通模式"></a>普通模式</h3><h4 id="Apc类"><a href="#Apc类" class="headerlink" title="Apc类:"></a>Apc类:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">poke</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"法师消耗"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//请求支援，需要打野和辅助帮忙</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">help</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Jungle jungle = <span class="keyword">new</span> Jungle();</span><br><span class="line">        Support support = <span class="keyword">new</span> Support();</span><br><span class="line">        System.out.println(<span class="string">"法师请求支援"</span>);</span><br><span class="line">        jungle.daye();</span><br><span class="line">        support.vision();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Jungle类："><a href="#Jungle类：" class="headerlink" title="Jungle类："></a>Jungle类：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Jungle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">daye</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"打野打野"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//打野要gank了，法师和辅助要跟着一起配合</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Apc apc = <span class="keyword">new</span> Apc();</span><br><span class="line">        Support support = <span class="keyword">new</span> Support();</span><br><span class="line">        System.out.println(<span class="string">"打野开始抓人："</span>);</span><br><span class="line">        apc.poke();</span><br><span class="line">        support.vision();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Support类："><a href="#Support类：" class="headerlink" title="Support类："></a>Support类：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Support</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">vision</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"辅助占视野"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//辅助先回城补状态了，你们先猥琐发育</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">back</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Apc apc = <span class="keyword">new</span> Apc();</span><br><span class="line">        Jungle jungle = <span class="keyword">new</span> Jungle();</span><br><span class="line">        System.out.println(<span class="string">"辅助暂时回城了："</span>);</span><br><span class="line">        apc.poke();</span><br><span class="line">        jungle.daye();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Client类："><a href="#Client类：" class="headerlink" title="Client类："></a>Client类：</h4><p>之前用测试方法，觉得不是特别好，所以以后还是加个client类给各位小伙伴看。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Apc apc = <span class="keyword">new</span> Apc();</span><br><span class="line">        Jungle jungle = <span class="keyword">new</span> Jungle();</span><br><span class="line">        Support support = <span class="keyword">new</span> Support();</span><br><span class="line"></span><br><span class="line">        apc.help();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"------------------------------"</span>);</span><br><span class="line">        jungle.gank();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"------------------------------"</span>);</span><br><span class="line">        support.back();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h4><p><img src="1.png" alt=""></p><p>确实可以像我们想象的一样，各职位互相协作，但是不知道各位小伙伴有没有看到什么问题了，是不是每次需要合作之前都需要<strong>new一下其它对象</strong>，这样其实是很不利于松耦合的，各个类之间都相互练习在一起，<strong>牵一发而动全身</strong>，不希望看到耦合这么高，所以中介者模式就出现了。</p><h3 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h3><hr><p>当然需求还是上面的需求，只不过多了几个类，<strong>抽象中介者，具体中介者，抽象同事类，具体同事类</strong></p><h4 id="AbstractMediator类："><a href="#AbstractMediator类：" class="headerlink" title="AbstractMediator类："></a>AbstractMediator类：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractMediator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">help</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">gank</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">back</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Mediator类："><a href="#Mediator类：" class="headerlink" title="Mediator类："></a>Mediator类：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mediator</span> <span class="keyword">extends</span> <span class="title">AbstractMediator</span> </span>&#123;</span><br><span class="line">    <span class="comment">//具体中介者类要知道自己给谁进行中介调停</span></span><br><span class="line">    Apc apc;</span><br><span class="line">    Jungle jungle;</span><br><span class="line">    Support support;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mediator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.apc = <span class="keyword">new</span> Apc(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.jungle = <span class="keyword">new</span> Jungle(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.support = <span class="keyword">new</span> Support(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">help</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"法师请求支援"</span>);</span><br><span class="line">        jungle.daye();</span><br><span class="line">        support.vision();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"打野开始抓人："</span>);</span><br><span class="line">        apc.poke();</span><br><span class="line">        support.vision();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">back</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"辅助暂时回城了："</span>);</span><br><span class="line">        apc.poke();</span><br><span class="line">        jungle.daye();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AbstractHero类（抽象同事类）："><a href="#AbstractHero类（抽象同事类）：" class="headerlink" title="AbstractHero类（抽象同事类）："></a>AbstractHero类（抽象同事类）：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractHero</span> </span>&#123;</span><br><span class="line">    <span class="comment">//和具体中介者产生一个联系关系</span></span><br><span class="line">    Mediator mediator;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractHero</span><span class="params">(Mediator mediator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mediator = mediator;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了减少篇幅呢，具体英雄类我就只拿Jungle类来讲，其它都是一样的</p><h4 id="Jungle类（具体同事类）："><a href="#Jungle类（具体同事类）：" class="headerlink" title="Jungle类（具体同事类）："></a>Jungle类（具体同事类）：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Jungle</span> <span class="keyword">extends</span> <span class="title">AbstractHero</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//首先注入中介者</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Jungle</span><span class="params">(Mediator mediator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(mediator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//属于自己干的事情的还是一样，也可以多几个方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">daye</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"打野打野"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//设计到别人的事情，几个人一起合作的事情呢</span></span><br><span class="line">    <span class="comment">//也不用自己联系他人，直接跟中介者说下，交给中介者来办</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mediator.gank();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至于其它的同事类都是一样的，注入一个中介者，把耦合度高的事情交给中介者</p><h4 id="Client类：-1"><a href="#Client类：-1" class="headerlink" title="Client类："></a>Client类：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Mediator mediator = <span class="keyword">new</span> Mediator();</span><br><span class="line">        </span><br><span class="line">        Apc apc = <span class="keyword">new</span> Apc(mediator);</span><br><span class="line">        Jungle jungle = <span class="keyword">new</span> Jungle(mediator);</span><br><span class="line">        Support support = <span class="keyword">new</span> Support(mediator);</span><br><span class="line"></span><br><span class="line">        apc.help();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"------------------------------"</span>);</span><br><span class="line">        jungle.gank();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"------------------------------"</span>);</span><br><span class="line">        support.back();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出：-1"><a href="#输出：-1" class="headerlink" title="输出："></a>输出：</h4><p><img src="2.png" alt=""></p><p>可以看到是一样的结果。</p><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li>优点：类与类之间的耦合度低，做到了松耦合</li><li>缺点：所有需要合作的方法都堆积到了中介者类，中介者类膨胀的很快</li></ul><h3 id="UML类图："><a href="#UML类图：" class="headerlink" title="UML类图："></a>UML类图：</h3><p><img src="3.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;中介者模式又称调停模式，在我们现实生活中也会又很多中介者的存在，房屋中介者，合同中介者，在java中的中介者模式又会是什么样子的呢。
    
    </summary>
    
    
      <category term="设计模式" scheme="https://imperfect.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="进阶" scheme="https://imperfect.top/tags/%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>原型模式【java设计模式】</title>
    <link href="https://imperfect.top/posts/dc071025.html"/>
    <id>https://imperfect.top/posts/dc071025.html</id>
    <published>2020-04-06T11:25:50.000Z</published>
    <updated>2020-05-02T14:04:43.127Z</updated>
    
    <content type="html"><![CDATA[<p>什么是原型模式呢，按照我的浅显的理解呢，是指在以某个产品为原型下，复制出我们需要的同样的产品，涉及到了复制，就以浅拷贝和深拷贝来进行切入。<a id="more"></a></p><h3 id="浅拷贝与深拷贝"><a href="#浅拷贝与深拷贝" class="headerlink" title="浅拷贝与深拷贝"></a>浅拷贝与深拷贝</h3><hr><p>一般来说，无论什么编程语言，都分浅拷贝和深拷贝。浅拷贝就是指两个指针指向了同一个对象，原对象和拷贝对象只要有一个修改，另外一个也随着修改。深拷贝是指，重新创建了一个和原对象一模一样内容的拷贝对象，两者是独立的。</p><h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><hr><h5 id="Student-java"><a href="#Student-java" class="headerlink" title="Student.java"></a>Student.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentShallow</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AddressShallow address;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构造函数，get，set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Address-java"><a href="#Address-java" class="headerlink" title="Address.java"></a>Address.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddressShallow</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line">    <span class="keyword">private</span> String street;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数，get，set方法</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试类："><a href="#测试类：" class="headerlink" title="测试类："></a>测试类：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testShallowClone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">    AddressShallow address = <span class="keyword">new</span> AddressShallow(<span class="string">"abc"</span>, <span class="string">"def"</span>);</span><br><span class="line">    StudentShallow student = <span class="keyword">new</span> StudentShallow(address, <span class="string">"test"</span>, <span class="number">19</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"原："</span> + student);</span><br><span class="line"></span><br><span class="line">    StudentShallow clone = (StudentShallow) student.clone();</span><br><span class="line">    System.out.println(<span class="string">"拷贝："</span> + clone);</span><br><span class="line"></span><br><span class="line">    System.out.println(student.hashCode());</span><br><span class="line">    System.out.println(clone.hashCode());</span><br><span class="line">    </span><br><span class="line">    student.setName(<span class="string">"修改"</span>);</span><br><span class="line">    System.out.println(<span class="string">"修改原："</span> + student);</span><br><span class="line">    System.out.println(<span class="string">"修改拷贝："</span> + clone);</span><br><span class="line"></span><br><span class="line">    address.setProvince(<span class="string">"temp"</span>);</span><br><span class="line">    System.out.println(<span class="string">"修改原："</span> + student);</span><br><span class="line">    System.out.println(<span class="string">"修改拷贝："</span> + clone);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">原：StudentShallow&#123;street=AddressShallow&#123;province=<span class="string">'abc'</span>, street=<span class="string">'def'</span>&#125;, name=<span class="string">'test'</span>, age=<span class="number">19</span>&#125;</span><br><span class="line">拷贝：StudentShallow&#123;street=AddressShallow&#123;province=<span class="string">'abc'</span>, street=<span class="string">'def'</span>&#125;, name=<span class="string">'test'</span>, age=<span class="number">19</span>&#125;</span><br><span class="line"><span class="number">1327763628</span><span class="comment">//两者的hashcode</span></span><br><span class="line"><span class="number">1915503092</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 修改了原对象，诶，和上面说到不一致啊</span></span><br><span class="line"><span class="comment"> *  1. hashcode不同，确实创建了另外一个对象</span></span><br><span class="line"><span class="comment"> *  2. 修改了名字(String类型)，也是只影响自己</span></span><br><span class="line"><span class="comment"> *  目前来看确实像是深拷贝，不过不着急，继续往下看</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">修改原：StudentShallow&#123;street=AddressShallow&#123;province=<span class="string">'abc'</span>, street=<span class="string">'def'</span>&#125;, name=<span class="string">'修改'</span>, age=<span class="number">19</span>&#125;</span><br><span class="line">修改拷贝：StudentShallow&#123;street=AddressShallow&#123;province=<span class="string">'abc'</span>, street=<span class="string">'def'</span>&#125;, name=<span class="string">'test'</span>, age=<span class="number">19</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  这次修改了一个类对象，不再是基本类型</span></span><br><span class="line"><span class="comment"> *  发现问题了，两者是同时改变的</span></span><br><span class="line"><span class="comment"> *  所以来说，还是算一个浅拷贝</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">修改原：StudentShallow&#123;street=AddressShallow&#123;province=<span class="string">'temp'</span>, street=<span class="string">'def'</span>&#125;, name=<span class="string">'修改'</span>, age=<span class="number">19</span>&#125;</span><br><span class="line">修改拷贝：StudentShallow&#123;street=AddressShallow&#123;province=<span class="string">'temp'</span>, street=<span class="string">'def'</span>&#125;, name=<span class="string">'test'</span>, age=<span class="number">19</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><h5 id="Student-java-1"><a href="#Student-java-1" class="headerlink" title="Student.java"></a>Student.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDeep</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AddressDeep address;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//区别：非基本数据类型也调用clone()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        StudentDeep student = (StudentDeep) <span class="keyword">super</span>.clone();</span><br><span class="line">        student.address = (AddressDeep) address.clone();</span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="comment">//构造函数，get，set方法   </span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Address-java-1"><a href="#Address-java-1" class="headerlink" title="Address.java"></a>Address.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddressDeep</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line">    <span class="keyword">private</span> String street;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//和浅拷贝的区别是，非基本数据类型的类也继承了Cloneable接口</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构造函数，get，set方法   </span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试类：-1"><a href="#测试类：-1" class="headerlink" title="测试类："></a>测试类：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeepClone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">    AddressDeep address = <span class="keyword">new</span> AddressDeep(<span class="string">"abc"</span>, <span class="string">"def"</span>);</span><br><span class="line">    StudentDeep student = <span class="keyword">new</span> StudentDeep(address, <span class="string">"test"</span>, <span class="number">19</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"原："</span> + student);</span><br><span class="line"></span><br><span class="line">    StudentDeep clone = (StudentDeep) student.clone();</span><br><span class="line">    System.out.println(<span class="string">"拷贝："</span> + clone);</span><br><span class="line"></span><br><span class="line">    System.out.println(student.hashCode());</span><br><span class="line">    System.out.println(clone.hashCode());</span><br><span class="line"></span><br><span class="line">    student.setName(<span class="string">"修改"</span>);</span><br><span class="line">    System.out.println(<span class="string">"修改原："</span> + student);</span><br><span class="line">    System.out.println(<span class="string">"修改拷贝："</span> + clone);</span><br><span class="line"></span><br><span class="line">    address.setProvince(<span class="string">"test"</span>);</span><br><span class="line">    System.out.println(<span class="string">"修改原："</span> + student);</span><br><span class="line">    System.out.println(<span class="string">"修改拷贝："</span> + clone);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="输出：-1"><a href="#输出：-1" class="headerlink" title="输出："></a>输出：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">原：StudentShallow&#123;street=AddressShallow&#123;province=<span class="string">'abc'</span>, street=<span class="string">'def'</span>&#125;, name=<span class="string">'test'</span>, age=<span class="number">19</span>&#125;</span><br><span class="line">拷贝：StudentShallow&#123;street=AddressShallow&#123;province=<span class="string">'abc'</span>, street=<span class="string">'def'</span>&#125;, name=<span class="string">'test'</span>, age=<span class="number">19</span>&#125;</span><br><span class="line"><span class="number">1327763628</span></span><br><span class="line"><span class="number">1915503092</span></span><br><span class="line">修改原：StudentShallow&#123;street=AddressShallow&#123;province=<span class="string">'abc'</span>, street=<span class="string">'def'</span>&#125;, name=<span class="string">'修改'</span>, age=<span class="number">19</span>&#125;</span><br><span class="line">修改拷贝：StudentShallow&#123;street=AddressShallow&#123;province=<span class="string">'abc'</span>, street=<span class="string">'def'</span>&#125;, name=<span class="string">'test'</span>, age=<span class="number">19</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//只看这里，可以发现两者的修改已经相互独立，这就是深拷贝</span></span><br><span class="line">修改原：StudentShallow&#123;street=AddressShallow&#123;province=<span class="string">'test'</span>, street=<span class="string">'def'</span>&#125;, name=<span class="string">'修改'</span>, age=<span class="number">19</span>&#125;</span><br><span class="line">修改拷贝：StudentShallow&#123;street=AddressShallow&#123;province=<span class="string">'abc'</span>, street=<span class="string">'def'</span>&#125;, name=<span class="string">'test'</span>, age=<span class="number">19</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><ol><li>java提供的实现Cloneable接口的clone（）默认是浅拷贝</li><li>基本数据类型不参与拷贝过程，简单来说就是，可以错误得理解为，简单数据类型是深拷贝</li></ol><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><hr><p>花比较多的篇幅来讲浅拷贝和深拷贝其实是有道理的，原型模式说到底就是拷贝过程，省去了new一个对象，只不过拷贝过程是浅拷贝还是深拷贝就是靠需求来决定。</p><p>原型模式一般需要两个类，抽象产品类，具体产品类</p><h4 id="抽象产品类："><a href="#抽象产品类：" class="headerlink" title="抽象产品类："></a>抽象产品类：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MobilePhone</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String cpu;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构造函数，get，set方法  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="具体产品类："><a href="#具体产品类：" class="headerlink" title="具体产品类："></a>具体产品类：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnePlus</span> <span class="keyword">extends</span> <span class="title">MobilePhone</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OnePlus</span><span class="params">(String cpu, <span class="keyword">int</span> price)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">super</span>(cpu, price);</span><br><span class="line">        System.out.println(<span class="string">"调用了构造函数"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试类：-2"><a href="#测试类：-2" class="headerlink" title="测试类："></a>测试类：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testEasyPrototype</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">    MobilePhone phone = <span class="keyword">new</span> OnePlus(<span class="string">"865"</span>, <span class="number">3999</span>);</span><br><span class="line">    System.out.println(<span class="string">"原型："</span> + phone);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        System.out.println(<span class="string">"生产第"</span> + (i + <span class="number">1</span>) + <span class="string">"台手机："</span> + phone.clone());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出：-2"><a href="#输出：-2" class="headerlink" title="输出："></a>输出：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">调用了构造函数</span><br><span class="line">原型：Phone&#123;cpu=<span class="string">'865'</span>, price=<span class="number">3999</span>&#125;</span><br><span class="line">生产第<span class="number">1</span>台手机：Phone&#123;cpu=<span class="string">'865'</span>, price=<span class="number">3999</span>&#125;</span><br><span class="line">生产第<span class="number">2</span>台手机：Phone&#123;cpu=<span class="string">'865'</span>, price=<span class="number">3999</span>&#125;</span><br><span class="line">生产第<span class="number">3</span>台手机：Phone&#123;cpu=<span class="string">'865'</span>, price=<span class="number">3999</span>&#125;</span><br><span class="line">........</span><br></pre></td></tr></table></figure><p>可以看到，构造函数只是被调用了一次，就是创造了一个原型，需要的话，复制即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;什么是原型模式呢，按照我的浅显的理解呢，是指在以某个产品为原型下，复制出我们需要的同样的产品，涉及到了复制，就以浅拷贝和深拷贝来进行切入。
    
    </summary>
    
    
      <category term="设计模式" scheme="https://imperfect.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="进阶" scheme="https://imperfect.top/tags/%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>springmvc【快速入门】</title>
    <link href="https://imperfect.top/posts/f2e12c10.html"/>
    <id>https://imperfect.top/posts/f2e12c10.html</id>
    <published>2020-04-02T21:31:20.000Z</published>
    <updated>2020-05-02T14:04:43.102Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><h3 id="一、功能"><a href="#一、功能" class="headerlink" title="一、功能"></a>一、功能</h3><p>由前面我们可以知道Mybais是工作在持久层，和数据库打交道的，而接下来要讲的SpringMVC是工作在表现层，简单来说就是和页面有关的，展示给我们看的。我们在使用SpringMVC的时候一般来说都是采用注解的方式<a id="more"></a></p><h3 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h3><h4 id="2-1创建项目"><a href="#2-1创建项目" class="headerlink" title="2.1创建项目"></a>2.1创建项目</h4><p>​    <img src="springmvc%E7%9B%AE%E5%BD%95.png" alt="springmvc目录"></p><h4 id="2-1-配置"><a href="#2-1-配置" class="headerlink" title="2.1 配置"></a>2.1 配置</h4><h5 id="springmvc-xml"><a href="#springmvc-xml" class="headerlink" title="springmvc.xml"></a>springmvc.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--扫描base-package下所有交给ioc容器管理的类，到时候可以直接自动取到--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.temporz.springmvc"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    配置视图解析器, 视图解析器是干嘛的呢，结合下面的java文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        前缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>除此之外我们还要配置web.xml</p><h5 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"2.4"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--配置视图拦截器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--随着项目的启动而启动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--拦截所有请求--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-sprinmvc的工作流程"><a href="#2-2-sprinmvc的工作流程" class="headerlink" title="2.2 sprinmvc的工作流程"></a>2.2 sprinmvc的工作流程</h4><h5 id="RequestMethod-java"><a href="#RequestMethod-java" class="headerlink" title="RequestMethod.java"></a>RequestMethod.java</h5><p>希望大家通过这个文件能够大概地熟悉springmvc的工作流程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SUCCESS = <span class="string">"success"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//springmvc的工作流程，假设向服务器发送了一个testGet请求</span></span><br><span class="line">    <span class="comment">//1、上面配置的视图解析器会拦截这个请求，并交给springmvc处理</span></span><br><span class="line"><span class="comment">//2、springmvc根据配置文件中的base-package扫描所指定的包</span></span><br><span class="line">    <span class="comment">//3、找到在ioc中的类，也就是有注解的(@Controller, @Service...)</span></span><br><span class="line"><span class="comment">//4、在类里面找是否有请求映射符合(@RequestMapping中的value值)</span></span><br><span class="line">     <span class="comment">//5、找到后执行该方法</span></span><br><span class="line">     <span class="meta">@RequestMapping</span>(value = <span class="string">"/testGet"</span>, method = org.springframework.web.bind.annotation.RequestMethod.GET)</span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">getMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         System.out.println(<span class="string">"Get method"</span>);</span><br><span class="line">         <span class="keyword">return</span> SUCCESS;</span><br><span class="line">         <span class="comment">//6、返回了"success"，然后交给了视图解析器来处理，怎么处理呢</span></span><br><span class="line">         <span class="comment">//7、经过视图解析器解析后变成</span></span><br><span class="line">         <span class="comment">//prefix + "success" + suffix = /WEB-INF/views/success.jsp</span></span><br><span class="line">         <span class="comment">//也就是说springmvc会在这个路径下找"success.jsp"这个文件</span></span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="meta">@RequestMapping</span>(value = <span class="string">"/testPost"</span>, method = org.springframework.web.bind.annotation.RequestMethod.POST)</span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">postMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">         System.out.println(<span class="string">"Post method"</span>);</span><br><span class="line">         <span class="keyword">return</span> SUCCESS;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-测试"><a href="#2-3-测试" class="headerlink" title="2.3 测试"></a>2.3 测试</h4><h5 id="index-jsp"><a href="#index-jsp" class="headerlink" title="index.jsp"></a>index.jsp</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Hello World!&lt;/h2&gt;</span><br><span class="line">&lt;!--涉及到了post方法一般要用表单，因为超链接不能指定method属性--&gt;</span><br><span class="line">&lt;form action=<span class="string">"testPost"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"Test Post Method"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;a href="testGet"&gt;Test Get Method&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="2-4-注解"><a href="#2-4-注解" class="headerlink" title="2.4 注解"></a>2.4 注解</h4><p>接着介绍两个注解<strong>@RequestParam</strong> 和<strong>@PathVariable</strong></p><h5 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h5><p> 顾名思义，request中参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在RequestMethod.java中的一个方法</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/getWithParams"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getMethodWithParams</span><span class="params">(@RequestParam(value = <span class="string">"id"</span>, required = <span class="keyword">false</span>)</span>Integer id,</span></span><br><span class="line"><span class="function">     @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"name"</span>, defaultValue = <span class="string">"temporz"</span>)</span>String name)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Get method with params ["</span> + id + <span class="string">" and "</span> + name + <span class="string">"]"</span>);</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="getWithParams?id=5&amp;name=temp"&gt;Test Get Method with params&lt;/a&gt;</span><br><span class="line">&lt;!--看到这里不知道有没有小伙伴发现有什么不一样了呢</span><br><span class="line">不是向服务器发送了getWithParams?id=<span class="number">5</span>&amp;name=temp的一个请求了吗</span><br><span class="line">但是为什么类中只是getWithParams呢，不应该会报错吗</span><br><span class="line">没错，springmvc找到这个类后，本来想报错，结果一看</span><br><span class="line">诶，有<span class="meta">@RequestParam</span>的注解，要求带有id(value)，不过是可有可无的(required=<span class="keyword">false</span>)</span><br><span class="line">还要求带有name(value)，这个是一定要有，但是如果不填的话好像有默认值为temporz(defaultValue)--&gt;</span><br><span class="line">&lt;!--再来看看超链接getWithParams?id=<span class="number">5</span>&amp;name=temp</span><br><span class="line">getWithParams:springmvc能够找到这个映射</span><br><span class="line">id:可有可无，不过你如果有了，我就能拿到</span><br><span class="line">name:是要有，但是你不填的话，我也能拿到，为(temporz)--&gt;</span><br></pre></td></tr></table></figure><h5 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h5><p> 同样顾名思义，路径(url)上的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/delete/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testPathVariable</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Integer id)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Test path variable, id = "</span> + id);</span><br><span class="line">    <span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="delete/1"&gt;Test path variable&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--和上面对比不知道看出区别了没有，这里的请求路径是写死的</span><br><span class="line">也就是说，你路径上有的这样的内容，我才能去找到对应的执行方法</span><br><span class="line">接着才能从路径上取出相应的值</span><br><span class="line">而<span class="meta">@RequestParam</span>是根据我们的实际情况来决定是否要有这个参数</span><br><span class="line">不知道这样说大家能不能明白两者的区别--&gt;</span><br></pre></td></tr></table></figure><h4 id="2-5-REST风格的增删改查"><a href="#2-5-REST风格的增删改查" class="headerlink" title="2.5 REST风格的增删改查"></a>2.5 <strong>REST</strong>风格的增删改查</h4><p> GET—&gt;select, POST—&gt;insert, DELETE—&gt;delete, PUT—&gt;update</p><p> 问题出现了，服务器不是只接收post和get的请求吗，那么put和delete是怎么来的呢，这个是我们所要的讲的知识点。要想使用rest风格的crud，我们还需要web.xml中<strong>添加</strong>内容</p><h5 id="web-xml-1"><a href="#web-xml-1" class="headerlink" title="web.xml"></a>web.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--仅仅是添加的内容哈，前面配置的视图解析器不能删--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--顾名思义，配置的是一个过滤器，原理是什么呢，且往下面看--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>hiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--记住这个类的名字--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>hiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p> java文件，其实内容不容看，给小伙伴们测试用的，懂得原理就行了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/testRest/&#123;id&#125;"</span>, method = org.springframework.web.bind.annotation.RequestMethod.PUT)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">restPut</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Integer id)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"rest Put:"</span> + id);</span><br><span class="line">    <span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/testRest/&#123;id&#125;"</span>, method = org.springframework.web.bind.annotation.RequestMethod.DELETE)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">restDelete</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Integer id)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"rest Delete:"</span> + id);</span><br><span class="line">    <span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/testRest"</span>, method = org.springframework.web.bind.annotation.RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">restPost</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"rest Post"</span>);</span><br><span class="line">    <span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/testRest/&#123;id&#125;"</span>, method = org.springframework.web.bind.annotation.RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">restGet</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Integer id)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"rest Get:"</span> + id);</span><br><span class="line">    <span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="index-jsp-1"><a href="#index-jsp-1" class="headerlink" title="index.jsp"></a>index.jsp</h5><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;br&gt;</span><br><span class="line">&lt;!--也不用看完，看一个就行了--&gt;</span><br><span class="line">&lt;!--如果我们想使用rest风格的，那么我们需要增加一个input标签</span><br><span class="line">type=<span class="string">"hidden"</span>, name=<span class="string">"_method"</span>, value=<span class="string">"PUT"</span></span><br><span class="line">除了value是可以写成我们想要的put或者delete，其它两个都是固定的--&gt;</span><br><span class="line">&lt;form action=<span class="string">"testRest/6"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"_method"</span> value=<span class="string">"PUT"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"rest put(update)"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;form action=<span class="string">"testRest/5"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"_method"</span> value=<span class="string">"DELETE"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"rest delete"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;form action=<span class="string">"testRest"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"rest post(insert)"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;a href=<span class="string">"testRest/2"</span>&gt;<span class="function">Rest <span class="title">get</span><span class="params">(select)</span>&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><p> 解析下上面配置的过滤器是怎么使用的，以及为什么value(hidden)和name(_method)要写死，还记得上面要小伙伴记得类的名字吗(HiddenHttpMethodFilter)。</p><p> 首先是隐藏域(hidden)中的，所以我们的value是要写hidden中</p><p> 接着我们进入这个类中，看下源码，比较难，希望大家耐心看看</p><p> <img src="springmvcRest.png" alt="springmvcRest"></p><p> 看doFilterInternal方法，要想使用rest风格的update和delete，首先要是post方法，其次有个request.getParameter(this.methodParam)，转换一下getParameter(“_method”)，就是根据名字取值</p><p> 所以呢就是name=”_method” value=”UPDATAE/DELETE”，这样才能取到是update还是delete。</p><h4 id="2-6-springmvc处理pojo"><a href="#2-6-springmvc处理pojo" class="headerlink" title="2.6 springmvc处理pojo"></a>2.6 springmvc处理pojo</h4><h5 id="Student-java"><a href="#Student-java" class="headerlink" title="Student.java"></a>Student.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Subject subject;</span><br><span class="line">    <span class="comment">//get,set方法</span></span><br><span class="line">    <span class="comment">//tostring方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Subject-java"><a href="#Subject-java" class="headerlink" title="Subject.java"></a>Subject.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> grades;</span><br><span class="line">    <span class="comment">//get,set</span></span><br><span class="line">    <span class="comment">//tostring</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="java文件"><a href="#java文件" class="headerlink" title="java文件"></a>java文件</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/pojo"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">pojo</span><span class="params">(Student student)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Test pojo + "</span> + student);</span><br><span class="line">    <span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="index-jsp-2"><a href="#index-jsp-2" class="headerlink" title="index.jsp"></a>index.jsp</h5><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"pojo"</span>&gt;</span><br><span class="line">    stuName:&lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span>&gt;&lt;br&gt;</span><br><span class="line">    stuAge:&lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span>&gt;&lt;br&gt;</span><br><span class="line">    stuSubjectsName: &lt;input type=<span class="string">"text"</span> name=<span class="string">"subject.name"</span>&gt;&lt;br&gt;</span><br><span class="line">    stuSubjectsGrade:&lt;input type=<span class="string">"text"</span> name=<span class="string">"subject.grades"</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;&lt;br&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;!--是不是和spring类似呢，都是取值然后装配给我们的对象</span><br><span class="line">所以这里的name不能乱写，要根据我们类中的属性来写</span><br><span class="line">并且这里还能支持级联属性--&gt;</span><br></pre></td></tr></table></figure><h4 id="2-7-重定向，转发"><a href="#2-7-重定向，转发" class="headerlink" title="2.7 重定向，转发"></a>2.7 重定向，转发</h4><p> 看下相对应的java文件既可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"测试重定向"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//没错，就是在返回的前面加上redirect就能重定向到指定界面(a.jsp)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/a.jsp"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//return "forward:/b.jsp"</span></span><br><span class="line">    <span class="comment">//请求转发(forward)到b.jsp</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 为什么可以这样呢，简单地看下源码(InternalResourceViewResolver的父类)UrlBasedViewResolver，也可以看到prefix+return+suffix的端倪</p><p> <img src="springmvc%E9%87%8D%E5%AE%9A%E5%90%91.png" alt="springmvc重定向"></p><h4 id="2-8-modelAndView"><a href="#2-8-modelAndView" class="headerlink" title="2.8 modelAndView"></a>2.8 modelAndView</h4><p> 上面我们不是有一个放回值(String类型)，然后拼凑prefix + return + suffix来交给springmvc来处理嘛，除此之外，我们还可以放回一个view，map，model，不管返回什么，最终都回包装成一个modelAndView类型.</p><p> 看下java文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/model"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">model</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//这里的SUCCESS就是字符串"success"</span></span><br><span class="line">    String viewName = SUCCESS;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//这个是我们手动包装成modelAndView</span></span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(viewName);</span><br><span class="line">    modelAndView.addObject(<span class="string">"time"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//最后返回的是modelAndView对象</span></span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="index-jsp-3"><a href="#index-jsp-3" class="headerlink" title="index.jsp"></a>index.jsp</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="model"&gt;test model and view&lt;/a&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SpringMVC&quot;&gt;&lt;a href=&quot;#SpringMVC&quot; class=&quot;headerlink&quot; title=&quot;SpringMVC&quot;&gt;&lt;/a&gt;SpringMVC&lt;/h2&gt;&lt;h3 id=&quot;一、功能&quot;&gt;&lt;a href=&quot;#一、功能&quot; class=&quot;headerlink&quot; title=&quot;一、功能&quot;&gt;&lt;/a&gt;一、功能&lt;/h3&gt;&lt;p&gt;由前面我们可以知道Mybais是工作在持久层，和数据库打交道的，而接下来要讲的SpringMVC是工作在表现层，简单来说就是和页面有关的，展示给我们看的。我们在使用SpringMVC的时候一般来说都是采用注解的方式
    
    </summary>
    
    
      <category term="ssm" scheme="https://imperfect.top/categories/ssm/"/>
    
    
      <category term="快速入门" scheme="https://imperfect.top/tags/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>spring【快速入门】</title>
    <link href="https://imperfect.top/posts/66716685.html"/>
    <id>https://imperfect.top/posts/66716685.html</id>
    <published>2020-04-02T21:30:42.000Z</published>
    <updated>2020-05-02T14:04:43.106Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><h3 id="一、功能"><a href="#一、功能" class="headerlink" title="一、功能"></a>一、功能</h3><p>Spring是一个轻量级的控制反转(IoC)和面向切面(AOP)的容器框架，就是把我们的实体类交给容器来管理，要使用的话不必要new，而是从框架里面getBeen即可。<a id="more"></a></p><h3 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h3><h4 id="2-1-IOC"><a href="#2-1-IOC" class="headerlink" title="2.1 IOC"></a>2.1 IOC</h4><h5 id="2-1-1创建dea工程"><a href="#2-1-1创建dea工程" class="headerlink" title="2.1.1创建dea工程"></a>2.1.1创建dea工程</h5><p>项目结构目录</p><p>​                   <img src="spring%E7%9B%AE%E5%BD%95.png" alt="spring目录"><br>​    </p><h5 id="2-1-2-创建一个Address类和Student类"><a href="#2-1-2-创建一个Address类和Student类" class="headerlink" title="2.1.2 创建一个Address类和Student类"></a>2.1.2 创建一个Address类和Student类</h5><h6 id="Address-java"><a href="#Address-java" class="headerlink" title="Address.java"></a>Address.java</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line">    <span class="keyword">private</span> String street;</span><br><span class="line">    <span class="comment">//get和set方法</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//一个全参构造，一个无参构造，为什么这样呢？卖个关子</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Student-java"><a href="#Student-java" class="headerlink" title="Student.java"></a>Student.java</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String judge;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//get和set方法</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//同样一个无参构造，一个全参构造</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-1-3-spring的配置文件"><a href="#2-1-3-spring的配置文件" class="headerlink" title="2.1.3 spring的配置文件"></a>2.1.3 spring的配置文件</h5><h6 id="applicationContext-xml"><a href="#applicationContext-xml" class="headerlink" title="applicationContext.xml"></a>applicationContext.xml</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--id:唯一识别这个been的字段，</span></span><br><span class="line"><span class="comment">        无论是been与been之间的ref还是取been都是用这个识别</span></span><br><span class="line"><span class="comment">        class: 这个been的实体类--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--有两种方法来装配been，一是使用constructor-arg，需要实体类提供相对应的构造函数，</span></span><br><span class="line"><span class="comment">        另外就是使用property，需要提供无参构造函数--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1、constructor-arg，需要对应的构造函数</span></span><br><span class="line"><span class="comment">        可以使用index或者type来给相应的属性赋值，使用index能够有效的避免同type的情况--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"address"</span> <span class="attr">class</span>=<span class="string">"com.imperfect.entity.Address"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"gds"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value</span>=<span class="string">"lczx"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--2、property</span></span><br><span class="line"><span class="comment">        name:实体类中的属性名称，不能乱写</span></span><br><span class="line"><span class="comment">        value:所要赋的值</span></span><br><span class="line"><span class="comment">        ref:所要指向been的id--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"com.imperfect.entity.Student"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"temp_name"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"judge"</span> <span class="attr">value</span>=<span class="string">"good"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">ref</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--这里要讲的是内部been--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student2"</span> <span class="attr">class</span>=<span class="string">"com.imperfect.entity.Student"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"temp_name2"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"20"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"judge"</span> <span class="attr">value</span>=<span class="string">"excellent"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--在property里面还可以配置内部been，同样的，如果实体类中的某一个属性是list，map，array呢？则同样可以在property下配置--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--需要注意的是，内部been只能在内部使用，在外部是无法取到的--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"address2"</span> <span class="attr">class</span>=<span class="string">"com.imperfect.entity.Address"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"province"</span> <span class="attr">value</span>=<span class="string">"zjs"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"street"</span> <span class="attr">value</span>=<span class="string">"abc"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>先看看property里面有哪些标签，可以看到可以配置been，array，list等</p><p><img src="springList.png" alt="springList"></p><h5 id="2-1-4-测试"><a href="#2-1-4-测试" class="headerlink" title="2.1.4 测试"></a>2.1.4 测试</h5><h6 id="TestSpring-java"><a href="#TestSpring-java" class="headerlink" title="TestSpring.java"></a>TestSpring.java</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSpring</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSpring</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">//getBeen(a)里面的字段就是我们配置been的id值</span></span><br><span class="line">        <span class="comment">//spring就是根据a去ioc容器里面找，如果找到id=a，则返回这个Been</span></span><br><span class="line">        Address address = (Address) ctx.getBean(<span class="string">"address"</span>);</span><br><span class="line">        Student student = (Student) ctx.getBean(<span class="string">"student"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//注意下面是得不到been的，因为它是内部been</span></span><br><span class="line"><span class="comment">//        Address address1 = (Address) ctx.getBean("address2");</span></span><br><span class="line">        Student student1 = (Student) ctx.getBean(<span class="string">"student2"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(address);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">        System.out.println(student1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果：</strong></p><p><img src="spring%E7%BB%93%E6%9E%9C.png" alt="spring结果"></p><p>可以看到已经把been取出来，并且取出成功了，这个是我们刚初学的时候用到最多的装配been，取出been的知识点。</p><p><strong>以上呢是基于xml配置的方法来装配been，除此之外我们还可以使用注解的方法</strong></p><h5 id="2-1-5-基于注解的方式"><a href="#2-1-5-基于注解的方式" class="headerlink" title="2.1.5 基于注解的方式"></a>2.1.5 基于注解的方式</h5><p>新建一个annotation包，在包下面呢定义三个类  </p><h6 id="Autowired-java"><a href="#Autowired-java" class="headerlink" title="Autowired.java"></a>Autowired.java</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Component, @Controller, @Service都是表示把这个类交个ioc容器来管理</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Autowired</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Autowired method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="MethodI-java"><a href="#MethodI-java" class="headerlink" title="MethodI.java"></a>MethodI.java</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MethodI</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//很简单的一个接口</span></span><br></pre></td></tr></table></figure><h6 id="MethodImpl-java"><a href="#MethodImpl-java" class="headerlink" title="MethodImpl.java"></a>MethodImpl.java</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//同样表示把这个类交给ioc容器来管理,这里的value值就是我们xml中的id</span></span><br><span class="line"><span class="comment">//如果只是@Component其它都不写呢，它默认会把value设为类名的第一个字母小写</span></span><br><span class="line"><span class="meta">@Component</span>(value=<span class="string">"abc"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodImpl</span> <span class="keyword">implements</span> <span class="title">MethodI</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Autowired类不是在之前已经交给ioc容器来管理了嘛</span></span><br><span class="line">    <span class="comment">//这个注解呢就相当于从ioc容器中取，就是自动装配</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Autowired autowired;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Before Autowired method"</span>);</span><br><span class="line">        autowired.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSpring</span> </span>&#123;</span><br><span class="line">        ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//这里的getbeen就是上面@Component中value的值</span></span><br><span class="line">    MethodI methodI = (MethodI) ctx.getBean(<span class="string">"abc"</span>);</span><br><span class="line">    </span><br><span class="line">    methodI.method();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有关注解怎样装配been也简单的过了一下了，下面就开始我们的aop(面向切面编程)的基础知识介绍</p><h4 id="2-2-AOP"><a href="#2-2-AOP" class="headerlink" title="2.2 AOP"></a>2.2 AOP</h4><h5 id="2-2-1-创建一个aop的包，并且创建三个类"><a href="#2-2-1-创建一个aop的包，并且创建三个类" class="headerlink" title="2.2.1 创建一个aop的包，并且创建三个类"></a>2.2.1 创建一个aop的包，并且创建三个类</h5><h6 id="CalculateI-java"><a href="#CalculateI-java" class="headerlink" title="CalculateI.java"></a>CalculateI.java</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CalculateI</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="CalculateImpl-java"><a href="#CalculateImpl-java" class="headerlink" title="CalculateImpl.java"></a>CalculateImpl.java</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculateImpl</span> <span class="keyword">implements</span> <span class="title">CalculateI</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = i + j;</span><br><span class="line">        System.out.println(<span class="string">"The result is "</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = i - j;</span><br><span class="line">        System.out.println(<span class="string">"The result is "</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = i * j;</span><br><span class="line">        System.out.println(<span class="string">"The result is "</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = i / j;</span><br><span class="line">        System.out.println(<span class="string">"The result is "</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有四个方法</p><p>现在想在每个方法的前后加两个切面（日志），形象化来说呢，就是这四个方法分别是鲁班一号，鲁班二号，鲁班三号，鲁班四号，两个切面分别是猴子，阿珂，现在先暂时这样想。</p><p>接着看看配置文件是怎么开始我们的切后排（切面）之路的。</p><h5 id="2-2-2-配置文件"><a href="#2-2-2-配置文件" class="headerlink" title="2.2.2 配置文件"></a>2.2.2 配置文件</h5><h6 id="applicationContext-xml-1"><a href="#applicationContext-xml-1" class="headerlink" title="applicationContext.xml"></a>applicationContext.xml</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--正常的been配置，因为我们之后要用到calculateImpl--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"calculateImpl"</span> <span class="attr">class</span>=<span class="string">"com.imperfect.spring.aop.CalculateImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"loggingAspect"</span> <span class="attr">class</span>=<span class="string">"com.imperfect.spring.aop.LoggingAspect"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置aop--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--我们在打团的时候，需要切谁，expression就是我们要切的对象，这样写是把鲁班们都切了，有切谁还不行啊，还要知道是谁切，是猴子切呢，还是阿珂切呢--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(public int com.imperfect.spring.aop.CalculateImpl.*(*, *))"</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!--ref:指定要切的类（包括猴子和阿珂）</span></span><br><span class="line"><span class="comment">            aop:before:什么时候切，是开团的时候切呢，还是收割呢</span></span><br><span class="line"><span class="comment">            method：是猴子切还是阿珂切</span></span><br><span class="line"><span class="comment">            pointcut-ref: 切鲁班一号还是鲁班二号--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"aspect"</span> <span class="attr">ref</span>=<span class="string">"loggingAspect"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"loggingBegin"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Spring&quot;&gt;&lt;a href=&quot;#Spring&quot; class=&quot;headerlink&quot; title=&quot;Spring&quot;&gt;&lt;/a&gt;Spring&lt;/h2&gt;&lt;h3 id=&quot;一、功能&quot;&gt;&lt;a href=&quot;#一、功能&quot; class=&quot;headerlink&quot; title=&quot;一、功能&quot;&gt;&lt;/a&gt;一、功能&lt;/h3&gt;&lt;p&gt;Spring是一个轻量级的控制反转(IoC)和面向切面(AOP)的容器框架，就是把我们的实体类交给容器来管理，要使用的话不必要new，而是从框架里面getBeen即可。
    
    </summary>
    
    
      <category term="ssm" scheme="https://imperfect.top/categories/ssm/"/>
    
    
      <category term="快速入门" scheme="https://imperfect.top/tags/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>链表篇【leetcode题解】</title>
    <link href="https://imperfect.top/posts/df1ef35e.html"/>
    <id>https://imperfect.top/posts/df1ef35e.html</id>
    <published>2020-04-02T21:01:24.000Z</published>
    <updated>2020-05-02T14:04:43.195Z</updated>
    
    <content type="html"><![CDATA[<p>有关算法篇的，基本都是leetcode上解题的。</p><h3 id="一、简单"><a href="#一、简单" class="headerlink" title="一、简单"></a>一、简单</h3><hr><h4 id="19、删除链表的倒数第n个节点"><a href="#19、删除链表的倒数第n个节点" class="headerlink" title="19、删除链表的倒数第n个节点"></a>19、删除链表的倒数第n个节点</h4><hr><p>给定一个链表，删除链表的倒数第 <em>n</em> 个节点，并且返回链表的头结点。</p><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n &#x3D; 2.</span><br><span class="line"></span><br><span class="line">当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5.</span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>给定的 <em>n</em> 保证是有效的。</p><hr><p><strong>思路1：</strong></p><p>先遍历一次获取链表长度length，然后减去所给的数（n），得到需要删除元素的位置，再遍历一次，从而删除元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果只有一个元素，那么直接返回null</span></span><br><span class="line">    <span class="keyword">if</span>(head.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> length = <span class="number">1</span>;</span><br><span class="line">    ListNode temp = head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到链表长度</span></span><br><span class="line">    <span class="keyword">while</span>(temp.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">        length++;</span><br><span class="line">        temp = temp.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(length == n)&#123;</span><br><span class="line">        <span class="keyword">return</span> head.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    temp = head;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//知道到需要删除元素d</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length - n; i++) &#123;</span><br><span class="line">        temp = temp.next;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode pre = temp;</span><br><span class="line">    ListNode target = temp.next;</span><br><span class="line">    ListNode after = target.next;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//节点的处理</span></span><br><span class="line">    pre.next = after;</span><br><span class="line">    target.next = <span class="keyword">null</span>;</span><br><span class="line">    target = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思路2：</strong></p><p>主要是用到双指针，慢指针（p1），快指针（p2），想法呢是当快指针的下一个指向null的时候（null == p2.next）的时候，p1指向的下一个元素就是我们要删除的节点。怎么样实现呢？</p><ol><li>假设一开始p1和p2都指向头指针（head），有一个链表1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5，要删除的是倒数第n（2）个节点。</li><li>按照上面的思路呢，要求p1指向3的时候，p2指向5，这样null == p2.next，p1.next也刚好是我们要删除的节点。</li><li>这样一看，会发现，p2刚好比p1多走了n步</li><li>想想一种特殊情况，如果是删除倒数第5个节点呢，这样p2直接就指向了null，所以要返回的头节点就是p1.next</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    ListNode p1 = head;</span><br><span class="line">    ListNode p2 = n1;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//快指针先走</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        p2 = p2.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//特殊情况</span></span><br><span class="line">    <span class="keyword">if</span>(p2 == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> p1.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(p2.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">        p2 = p2.next;</span><br><span class="line">        p1 = p1.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//到这里就说明null == p2.next</span></span><br><span class="line">    <span class="comment">//进行节点的操作</span></span><br><span class="line">    ListNode target = p1.next;</span><br><span class="line">    ListNode after = target.next;</span><br><span class="line">    p1.next = after;</span><br><span class="line">    </span><br><span class="line">    target.next = <span class="keyword">null</span>;</span><br><span class="line">    target = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="21、合并两个有序列表"><a href="#21、合并两个有序列表" class="headerlink" title="21、合并两个有序列表"></a>21、合并两个有序列表</h4><hr><p>将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span><br><span class="line">输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span><br></pre></td></tr></table></figure><hr><p><strong>思路：</strong></p><p>大体思路是，较小的指向较大的，这样形成有序链表，然后返回最小的节点</p><p><strong>代码：</strong></p><p>看代码更容易理解思路，之后再自己思考</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这个应该比较好理解，l1都weinull了</span></span><br><span class="line">    <span class="comment">//l2不可能指向l1，所以返回l2</span></span><br><span class="line">    <span class="keyword">if</span>(l1 == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> l2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(l2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> l1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(l1.val &lt; l2.val) &#123;</span><br><span class="line">        l1.next = mergeTwoLists(l1.next, l2);</span><br><span class="line">        <span class="keyword">return</span> l1;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        l2.next = mergeTwoLists(l1, l2.next);</span><br><span class="line">        <span class="keyword">return</span> l2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>着重地讲下递归那里是什么意思</p><p>假设：</p><p>l1：1 -&gt; 2 -&gt; 5</p><p>l2:  0 -&gt; 3 -&gt; 4</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(l1.val &lt; l2.val) &#123;</span><br><span class="line">    <span class="comment">//1比3小</span></span><br><span class="line">    l1.next = mergeTwoLists(l1.next, l2);</span><br><span class="line">    <span class="comment">//4. 先不管上面的递归，是不是最后返回的是l1[1]</span></span><br><span class="line">    <span class="keyword">return</span> l1;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">//1. 0 比 1小，进入这个里面</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *3. 来看下递归过程第二次mergeTwoLists（l1[1], l2.next[3])</span></span><br><span class="line"><span class="comment">     *又回到上面，我们再来看上面</span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * 5. 所以知道这个递归最终返回的是l1[1]</span></span><br><span class="line"><span class="comment">     * 6. 所以就是l2.next = 1那个节点</span></span><br><span class="line"><span class="comment">     *  7. 相同道理，其它层的递归也是一样的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    l2.next = mergeTwoLists(l1, l2.next);</span><br><span class="line">    <span class="comment">//2. 先不管上面的递归过程，递归结束后，最终返回的是l2（0）</span></span><br><span class="line">    <span class="keyword">return</span> l2;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="83、删除排序链表中的重复元素"><a href="#83、删除排序链表中的重复元素" class="headerlink" title="83、删除排序链表中的重复元素"></a>83、删除排序链表中的重复元素</h4><hr><p>给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 1-&gt;1-&gt;2</span><br><span class="line">输出: 1-&gt;2</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 1-&gt;1-&gt;2-&gt;3-&gt;3</span><br><span class="line">输出: 1-&gt;2-&gt;3</span><br></pre></td></tr></table></figure><hr><p><strong>思路：</strong></p><p>对一个节点node来说，如果本节点的值等于下一个节点的值（node.val == node.next.val），那么这个节点就知道下下个节点</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    ListNode cur = head;</span><br><span class="line">   <span class="comment">//前一判断是如果是空节点，后面的判断就是正常判断</span></span><br><span class="line">    <span class="keyword">while</span>(cur != <span class="keyword">null</span> || cur.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//如果本节点的值等于下一个节点的值</span></span><br><span class="line">        <span class="keyword">if</span>(cur.val == cur.next.val)&#123;</span><br><span class="line">            <span class="comment">//改变指向</span></span><br><span class="line">            ListNode node = cur.next;</span><br><span class="line">            cur.next = node.next;</span><br><span class="line">            <span class="comment">//把重复节点指向空</span></span><br><span class="line">            node = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果不等于就直接往下走</span></span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对上面的代码进行重构，可以发现，我们每次都是判断这个节点的值是否该等于下一节点，然后改变指向，自然而然地就想到了递归方式，比较难理解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向后递归</span></span><br><span class="line">    head.next = deleteDuplicates(head.next);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//和上面的判断语句一样</span></span><br><span class="line">    <span class="keyword">return</span> head.val == head.next.val ? head.next : head;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="160-相交链表"><a href="#160-相交链表" class="headerlink" title="160. 相交链表"></a>160. 相交链表</h4><hr><p>编写一个程序，找到两个单链表相交的起始节点。</p><p>如下面的两个链表<strong>：</strong></p><p><a href="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png" target="_blank" rel="noopener"><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png" alt="img"></a></p><p>在节点 c1 开始相交。</p><p><strong>示例 1：</strong></p><p><a href="https://assets.leetcode.com/uploads/2018/12/13/160_example_1.png" target="_blank" rel="noopener"><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_1.png" alt="img"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：intersectVal &#x3D; 8, listA &#x3D; [4,1,8,4,5], listB &#x3D; [5,0,1,8,4,5], skipA &#x3D; 2, skipB &#x3D; 3</span><br><span class="line">输出：Reference of the node with value &#x3D; 8</span><br><span class="line">输入解释：相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。</span><br></pre></td></tr></table></figure><hr><p><strong>思路1：</strong></p><p>利用HashMap，key = ListNode，value = val来保存一个链表，在遍历另外一个链表，用containskey来查询是否有这个节点，这样的解法效率并不高。</p><p><strong>代码1：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> </span>&#123;</span><br><span class="line">    Map map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">//先存l1</span></span><br><span class="line">    <span class="keyword">while</span>(headA != <span class="keyword">null</span>) &#123;</span><br><span class="line">        map.put(headA, headA.val);</span><br><span class="line">        headA = headA.next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//逐个遍历l2的节点</span></span><br><span class="line">    <span class="keyword">while</span>(headB != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(map.containsKey(headB))&#123;</span><br><span class="line">            <span class="keyword">return</span> headB;</span><br><span class="line">        &#125;</span><br><span class="line">        headB = headB.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//没有找到</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思路2：</strong></p><p>这个题目比较有意思就是两个链表长度不一样，如果一样那就好办了，两个节点同时指向下个节点，相同就返回，知道最后如果都为null，证明没有相交节点。</p><p>所以现在的重点是怎样使得两个链表的长度一致，利用a + b = b + a，这样就能保证长度一样，具体看下面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l1:1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6</span><br><span class="line">                   ^</span><br><span class="line">l2:      7 -&gt; 8 ---|</span><br></pre></td></tr></table></figure><p>怎样利用a + b = b + a呢，简单来说就是一个节点走完自己的链表后，再走对方的长度，这样就变成了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">headA: [1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6] -&gt; [7 -&gt; 8 -&gt; 4 -&gt; 5 -&gt; 6] -&gt; null</span><br><span class="line">headB: [7 -&gt; 8 -&gt; 4 -&gt; 5 -&gt; 6] -&gt; [1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6] -&gt; null</span><br><span class="line">                                                  ^</span><br><span class="line">                                                  |</span><br></pre></td></tr></table></figure><p>上面是有相交节点的，headA == headB == 4。没有相交节点的也是一样的道理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l1:1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6</span><br><span class="line">                   </span><br><span class="line">l2:      7 -&gt; 8</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">headA: [1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6] -&gt; [7 -&gt; 8] -&gt; null</span><br><span class="line">headB: [7 -&gt; 8] -&gt; [1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6] -&gt; null</span><br></pre></td></tr></table></figure><p>可以看到，如果两个都走到了null，那么可以证明没有相交节点。</p><p>为了容易理解，我还特意把每个节点的val设为不一样，这样不同值就表示不同节点。</p><p><strong>代码2：</strong></p><p>先来看一种比较幼稚，可以说不简洁明了的写法，也是初学者经常写的代码，充斥了大量的if。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(headA == <span class="keyword">null</span> || headB == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode tempA = headA;</span><br><span class="line">    ListNode tempB = headB;</span><br><span class="line">    <span class="keyword">while</span>(tempA != <span class="keyword">null</span> || tempB != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(tempA == <span class="keyword">null</span>) &#123;</span><br><span class="line">            tempA = headB;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tempB == <span class="keyword">null</span>) &#123;</span><br><span class="line">            tempB = headA;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tempA == tempB) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        tempA = tempA.next;</span><br><span class="line">        tempB = tempB.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tempA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是经过精简后的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(headA == <span class="keyword">null</span> || headB == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode tempA = headA;</span><br><span class="line">    ListNode tempB = headB;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果都指向了null，退出循环</span></span><br><span class="line">    <span class="keyword">while</span>(tempA != <span class="keyword">null</span> || tempB != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//节点相等就退出</span></span><br><span class="line">        <span class="keyword">if</span>(tempA == tempB) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//如果节点为null，那么就去遍历另外链表的节点</span></span><br><span class="line">        tempA = (tempA == <span class="keyword">null</span>) ? headB :tempA.next;</span><br><span class="line">        tempB = (tempB == <span class="keyword">null</span>) ? headA :tempB.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tempA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="243、回文链表"><a href="#243、回文链表" class="headerlink" title="243、回文链表"></a>243、回文链表</h4><hr><p>请判断一个链表是否为回文链表。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 1-&gt;2</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 1-&gt;2-&gt;2-&gt;1</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><hr><p><strong>思路：</strong></p><p>回文链表就是后面一半返过来等于前面一半，所以我们需要一个反转函数用来翻转链表，怎样知道一半是哪里呢，做多了自然就想到了快慢指针，一个是另外一个的两倍路程即可</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//快慢指针</span></span><br><span class="line">    ListNode slow = head;</span><br><span class="line">    ListNode fast = head.next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//无论是单数还是双数，指向下一个即为下半链表的开头</span></span><br><span class="line">    <span class="comment">//不熟悉的可以跟着代码走一遍 </span></span><br><span class="line">    slow = slow.next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//翻转链表</span></span><br><span class="line">    ListNode newHead = reverseList(slow);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(newHead != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(newHead.val != head.val) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        newHead = newHead.next;</span><br><span class="line">        head = head.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    ListNode newHead = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span>(head != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ListNode temp = head.next;</span><br><span class="line">        head.next = newHead;</span><br><span class="line">        newHead = head;</span><br><span class="line">        head = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newHead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、中等"><a href="#二、中等" class="headerlink" title="二、中等"></a>二、中等</h3><hr><h4 id="24、两两交换链表中的节点"><a href="#24、两两交换链表中的节点" class="headerlink" title="24、两两交换链表中的节点"></a>24、两两交换链表中的节点</h4><hr><p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。</p><p><strong>你不能只是单纯的改变节点内部的值</strong>，而是需要实际的进行节点交换。</p><p><strong>示例:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">给定 1-&gt;2-&gt;3-&gt;4, 你应该返回 2-&gt;1-&gt;4-&gt;3.</span><br></pre></td></tr></table></figure><hr><p><strong>思路：</strong></p><p>a -&gt; b -&gt; c，肯定是b指向a（b就变成了头结点），a指向下一个节点，而这下一个节点又是下一个两两节点的交换后的头结点（b1），这样自然而然地想到了递归</p><p><strong>代码：</strong></p><p>先看代码，如果不能理解，后面还有解释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">swapPairs</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line"><span class="comment">//递归结束条件</span></span><br><span class="line">    <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//cur就是a，temp就是b</span></span><br><span class="line">    ListNode cur = head;</span><br><span class="line">    ListNode temp = head.next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//a指向的是下一个交换对的头结点</span></span><br><span class="line">    cur.next = swapPairs(temp.next);</span><br><span class="line">    temp.next = cur;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把头结点返回给上一级调用递归的所指</span></span><br><span class="line">    <span class="comment">//就是相当于a.next = b1（temp）</span></span><br><span class="line">    <span class="comment">//到最上面一层就是真正的头结点</span></span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还是不懂继续看下面解释，已经理解就不用往下看了，因为接下来可会让你本来理解的觉得绕晕了，下面的解释适合新手</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> -&gt; <span class="number">2</span> -&gt; <span class="number">3</span> -&gt; <span class="number">4</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">swapPairs</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//递归结束体</span></span><br><span class="line">    <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第一次是把头指针（1）进行递归</span></span><br><span class="line">    ListNode cur = head; <span class="comment">//1</span></span><br><span class="line">    ListNode temp = head.next; <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *先不管递归，现在是不是2的下一个指向1(temp.next = cur)</span></span><br><span class="line"><span class="comment"> *  也就是2 -&gt; 1</span></span><br><span class="line"><span class="comment"> *  最后返回了2 (return temp)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  然后来看看递归，1.next = swapPairs(temp.next)</span></span><br><span class="line"><span class="comment"> *  是不是把3进行递归temp.next = 2.next = 3</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  然后重复上面的过程，此时cur = 3，temp = 4</span></span><br><span class="line"><span class="comment"> *  是不是变成了4 -&gt; 3(temp.next = cur) </span></span><br><span class="line"><span class="comment"> *  返回4 (return temp)</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> *  这个返回4是不是就是1.next = 4</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *然后3下一个指向了什么呢，再次递归的时候</span></span><br><span class="line"><span class="comment"> *  碰到递归结束体了，然后3指向了null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    cur.next = swapPairs(temp.next);</span><br><span class="line">    temp.next = cur;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="725、分隔列表"><a href="#725、分隔列表" class="headerlink" title="725、分隔列表"></a>725、分隔列表</h4><hr><p>给定一个头结点为 <code>root</code> 的链表, 编写一个函数以将链表分隔为 <code>k</code> 个连续的部分。</p><p>每部分的长度应该尽可能的相等: 任意两部分的长度差距不能超过 1，也就是说可能有些部分为 null。</p><p>这k个部分应该按照在链表中出现的顺序进行输出，并且排在前面的部分的长度应该大于或等于后面的长度。</p><p>返回一个符合上述规则的链表的列表。</p><p>举例： 1-&gt;2-&gt;3-&gt;4, k = 5 // 5 结果 [ [1], [2], [3], [4], null ]</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入: </span><br><span class="line">root &#x3D; [1, 2, 3], k &#x3D; 5</span><br><span class="line">输出: [[1],[2],[3],[],[]]</span><br><span class="line">解释:</span><br><span class="line">输入输出各部分都应该是链表，而不是数组。</span><br><span class="line">例如, 输入的结点 root 的 val&#x3D; 1, root.next.val &#x3D; 2, \root.next.next.val &#x3D; 3, 且 root.next.next.next &#x3D; null。</span><br><span class="line">第一个输出 output[0] 是 output[0].val &#x3D; 1, output[0].next &#x3D; null。</span><br><span class="line">最后一个元素 output[4] 为 null, 它代表了最后一个部分为空链表。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入: </span><br><span class="line">root &#x3D; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k &#x3D; 3</span><br><span class="line">输出: [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]</span><br><span class="line">解释:</span><br><span class="line">输入被分成了几个连续的部分，并且每部分的长度相差不超过1.前面部分的长度大于等于后面部分的长度。</span><br></pre></td></tr></table></figure><hr><p><strong>思路：</strong></p><p>观察示例2，有10个数字，分成3组，余1，这个余数从前开始加起，第一组加一个。如果有11个数字分成三组呢，余2，第一组加一个，第二组加一个。</p><p>根据思路需要什么变量呢，数组的长度，每组多少个，余数</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode[] splitListToParts(ListNode root, <span class="keyword">int</span> k) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> length = <span class="number">0</span>;<span class="comment">//数组长度</span></span><br><span class="line">    ListNode temp = root;</span><br><span class="line">    <span class="keyword">while</span>(temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">        length++;</span><br><span class="line">        temp = temp.next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//重新把temp指向root</span></span><br><span class="line">    temp = root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a = length % k;     <span class="comment">//余数</span></span><br><span class="line">    <span class="keyword">int</span> b = length / k;<span class="comment">//每组多少个</span></span><br><span class="line"></span><br><span class="line">    ListNode[] result = <span class="keyword">new</span> ListNode[k];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; temp != <span class="keyword">null</span> &amp;&amp; i &lt; k; i++) &#123;</span><br><span class="line">        result[i] = temp;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//每组实际的个数 = 每组多少个 + （如果余数大于0，则加1）</span></span><br><span class="line">        <span class="keyword">int</span> c = b + (a-- &gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; c - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//切断链表</span></span><br><span class="line">        ListNode cur = temp.next;</span><br><span class="line">        temp.next = <span class="keyword">null</span>;</span><br><span class="line">        temp = cur;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有关算法篇的，基本都是leetcode上解题的。&lt;/p&gt;
&lt;h3 id=&quot;一、简单&quot;&gt;&lt;a href=&quot;#一、简单&quot; class=&quot;headerlink&quot; title=&quot;一、简单&quot;&gt;&lt;/a&gt;一、简单&lt;/h3&gt;&lt;hr&gt;
&lt;h4 id=&quot;19、删除链表的倒数第n个节点&quot;&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="https://imperfect.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="https://imperfect.top/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>双指针篇【leetcode题解】</title>
    <link href="https://imperfect.top/posts/950d0faf.html"/>
    <id>https://imperfect.top/posts/950d0faf.html</id>
    <published>2020-04-02T21:00:46.000Z</published>
    <updated>2020-05-02T14:04:43.126Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、简单"><a href="#1、简单" class="headerlink" title="1、简单"></a>1、简单</h3><h4 id="283-移动零"><a href="#283-移动零" class="headerlink" title="283. 移动零"></a><a href="https://leetcode-cn.com/problems/move-zeroes/" target="_blank" rel="noopener">283. 移动零</a></h4><hr><p>给定一个数组 <code>nums</code>，编写一个函数将所有 <code>0</code> 移动到数组的末尾，同时保持非零元素的相对顺序。</p><p><strong>示例:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [0,1,0,3,12]</span><br><span class="line">输出: [1,3,12,0,0]</span><br></pre></td></tr></table></figure><hr><p><strong>思路：</strong></p><p>逐个遍历，如果遇到非0数，则从头开始给赋值，遍历结束完后再补0</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;<span class="comment">//非0数的个数</span></span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;<span class="comment">//从新开始赋值的下标</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i] != <span class="number">0</span>)&#123;</span><br><span class="line">            num++;</span><br><span class="line">            nums[index++] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = num; i &lt; nums.length; i++) &#123;</span><br><span class="line">        nums[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="349-两个数组的交集"><a href="#349-两个数组的交集" class="headerlink" title="349. 两个数组的交集"></a><a href="https://leetcode-cn.com/problems/intersection-of-two-arrays/" target="_blank" rel="noopener">349. 两个数组的交集</a></h4><hr><p>给定两个数组，编写一个函数来计算它们的交集。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums1 &#x3D; [1,2,2,1], nums2 &#x3D; [2,2]</span><br><span class="line">输出: [2]</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums1 &#x3D; [4,9,5], nums2 &#x3D; [9,4,9,8,4]</span><br><span class="line">输出: [9,4]</span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><ul><li>输出结果中的每个元素一定是唯一的。</li><li>我们可以不考虑输出结果的顺序。</li></ul><hr><p><strong>思路：</strong></p><p>最难处理的是交集，所以在众多集合类中我们选择HashSet，可以自动去重。首先nums1，nums2，排序。用双指针相比较，哪个小哪个前进，如果相等，则放进set集合里面。</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] intersection(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2) &#123;</span><br><span class="line">    <span class="keyword">int</span> p1 = <span class="number">0</span>, p2 = <span class="number">0</span>;<span class="comment">//双指针</span></span><br><span class="line">    Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    Arrays.sort(nums1);</span><br><span class="line">    Arrays.sort(nums2);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(p1 &lt; nums1.length &amp;&amp; p2 &lt; nums2.length)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums1[p1] &lt; nums2[p2])&#123;</span><br><span class="line">            p1++;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums2[p2] &lt; nums1[p1])&#123;</span><br><span class="line">            p2++;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            set.add(nums1[p1]);</span><br><span class="line">            p1++;</span><br><span class="line">            p2++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    p1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[set.size()];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> s : set) &#123;</span><br><span class="line">        result[p1++] = s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、中等"><a href="#2、中等" class="headerlink" title="2、中等"></a>2、中等</h3><h4 id="11、盛最多水的容器"><a href="#11、盛最多水的容器" class="headerlink" title="11、盛最多水的容器"></a>11、盛最多水的容器</h4><hr><p>给你 <em>n</em> 个非负整数 <em>a</em>1，<em>a</em>2，…，<em>a</em>n，每个数代表坐标中的一个点 (<em>i</em>, <em>ai</em>) 。在坐标内画 <em>n</em> 条垂直线，垂直线 <em>i</em> 的两个端点分别为 (<em>i</em>, <em>ai</em>) 和 (<em>i</em>, 0)。找出其中的两条线，使得它们与 <em>x</em> 轴共同构成的容器可以容纳最多的水。</p><p><strong>说明：</strong>你不能倾斜容器，且 <em>n</em> 的值至少为 2。</p><p><img src="https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/07/25/question_11.jpg" alt="img"></p><p>图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</p><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：[1,8,6,2,5,4,8,3,7]</span><br><span class="line">输出：49</span><br></pre></td></tr></table></figure><hr><p><strong>思路：</strong></p><p>头尾两个指针，能容纳的水就是所指向的内容小的数乘以两个指针的距离，同时做到，指针的前进和后退</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p1 = <span class="number">0</span>;<span class="comment">//头指针</span></span><br><span class="line">    <span class="keyword">int</span> p2 = height.length - <span class="number">1</span>;<span class="comment">//尾指针</span></span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p2 &gt;= p1)&#123;</span><br><span class="line">        <span class="keyword">if</span>(height[p1] &lt; height[p2])&#123;</span><br><span class="line">            temp = height[p1] * (p2 - p1);<span class="comment">//容量</span></span><br><span class="line">            p1++;<span class="comment">//指针的前进后退</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            temp = height[p2] * (p2 - p1);</span><br><span class="line">            p2--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(temp &gt; result)&#123;<span class="comment">//比较上次和这次的</span></span><br><span class="line">            <span class="keyword">int</span> a = temp;</span><br><span class="line">            temp = result;</span><br><span class="line">            result = a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来看看精简版代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = height.length - <span class="number">1</span>, res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">        res = height[i] &lt; height[j] ? </span><br><span class="line">            Math.max(res, (j - i) * height[i++]): </span><br><span class="line">        Math.max(res, (j - i) * height[j--]); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="15、三数之和"><a href="#15、三数之和" class="headerlink" title="15、三数之和"></a>15、三数之和</h4><hr><p>给你一个包含 <em>n</em> 个整数的数组 <code>nums</code>，判断 <code>nums</code> 中是否存在三个元素 <em>a，b，c ，*使得 *a + b + c =</em> 0 ？请你找出所有满足条件且不重复的三元组。</p><p><strong>注意：</strong>答案中不可以包含重复的三元组。</p><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">给定数组 nums &#x3D; [-1, 0, 1, 2, -1, -4]，</span><br><span class="line"></span><br><span class="line">满足要求的三元组集合为：</span><br><span class="line">[</span><br><span class="line">  [-1, 0, 1],</span><br><span class="line">  [-1, -1, 2]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><hr><p><strong>思路：</strong></p><p>首先先排序，接着固定一个数，然后利用双指针来移动，一个从固定数的下一个开始，一个从最后一个数字开始，再来考虑去重问题，遇到相同的数跳过。</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//先排序</span></span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//全大于0</span></span><br><span class="line">        <span class="keyword">if</span>(nums[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二次如果一样的固定数则跳过</span></span><br><span class="line">        <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>])&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//双指针</span></span><br><span class="line">        <span class="keyword">int</span> p1 = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> p2 = nums.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(p1 &lt; p2)&#123;</span><br><span class="line"><span class="comment">//判断</span></span><br><span class="line">            <span class="keyword">if</span>(nums[i] + nums[p1] + nums[p2] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                p2--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] + nums[p1] + nums[p2] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                p1++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//到这里已经确定了i， p1， p2这三个数</span></span><br><span class="line">                List&lt;Integer&gt; inner = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                inner.add(nums[i]);</span><br><span class="line">                inner.add(nums[p1]);</span><br><span class="line">                inner.add(nums[p2]);</span><br><span class="line">                result.add(inner);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//去重，比如从p1开始后的数组（包括p1）是[..., -2(p1), -2, -2, ...]</span></span><br><span class="line">                <span class="comment">//这样就可以看到后面的遍历都是多余的，所以要去重</span></span><br><span class="line">                <span class="keyword">while</span>(p1 &lt; p2 &amp;&amp; nums[p1 + <span class="number">1</span>] == nums[p1])&#123;</span><br><span class="line">                    p1++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span>(p1 &lt; p2 &amp;&amp; nums[p2 - <span class="number">1</span>] == nums[p2])&#123;</span><br><span class="line">                    p2--;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//继续寻找看还有没有</span></span><br><span class="line">                p1++;</span><br><span class="line">                p2--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="16、最接近的三数之和"><a href="#16、最接近的三数之和" class="headerlink" title="16、最接近的三数之和"></a>16、最接近的三数之和</h4><hr><p>给定一个包括 <em>n</em> 个整数的数组 <code>nums</code> 和 一个目标值 <code>target</code>。找出 <code>nums</code> 中的三个整数，使得它们的和与 <code>target</code> 最接近。返回这三个数的和。假定每组输入只存在唯一答案。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例如，给定数组 nums &#x3D; [-1，2，1，-4], 和 target &#x3D; 1.</span><br><span class="line"></span><br><span class="line">与 target 最接近的三个数的和为 2. (-1 + 2 + 1 &#x3D; 2).</span><br></pre></td></tr></table></figure><hr><p><strong>思路：</strong>经过了上面三数之和的锻炼，肯定知道怎样去得到和，但是，如何知道最接近的呢？可以想到另设一个参考点（result）作为和（sum）和目标数（target）的差值，然后逐个比较。比如：</p><ol><li>target = 2， result = -2，result与target的距离为4</li><li>进行遍历，有一组三数之和sum = 0</li><li>此时sum与target的距离为3 &lt; 4</li><li>用sum替换掉result，result = sum</li><li>下一次遍历</li></ol><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">threeSumClosest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//老套路，先排序</span></span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    <span class="comment">//先随便赋一个存在在数组里面的值给result作为参考数</span></span><br><span class="line">    <span class="keyword">int</span> result = nums[<span class="number">0</span>] + nums[<span class="number">1</span>] + nums[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="comment">//双指针</span></span><br><span class="line">        <span class="keyword">int</span> p1 = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> p2 = nums.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(p1 &lt; p2)&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = nums[i] + nums[p1] + nums[p2];</span><br><span class="line">            <span class="comment">//如果sum与target的距离小于result和target的距离</span></span><br><span class="line">            <span class="comment">//则替换掉result，这样能保证result永远是最接近target的</span></span><br><span class="line">            <span class="keyword">if</span>(Math.abs(target - sum) &lt; Math.abs(target - result))&#123;</span><br><span class="line">                result = sum;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(target &gt; sum)&#123;</span><br><span class="line">                <span class="comment">//三数之和比目标小，首指针往前走，和会更大点</span></span><br><span class="line">                p1++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(target &lt; sum)&#123;</span><br><span class="line">                <span class="comment">//同样道理</span></span><br><span class="line">                p2--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">//既然有三数之和（sum）等于（target）那肯定是返回target</span></span><br><span class="line">                <span class="keyword">return</span> target;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="19、删除链表的倒数第n个节点"><a href="#19、删除链表的倒数第n个节点" class="headerlink" title="19、删除链表的倒数第n个节点"></a>19、删除链表的倒数第n个节点</h4><hr><p>给定一个链表，删除链表的倒数第 <em>n</em> 个节点，并且返回链表的头结点。</p><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n &#x3D; 2.</span><br><span class="line"></span><br><span class="line">当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5.</span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>给定的 <em>n</em> 保证是有效的。</p><hr><p><strong>思路1：</strong>先遍历一次获取链表长度length，然后减去所给的数（n），得到需要删除元素的位置，再遍历一次，从而删除元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果只有一个元素，那么直接返回null</span></span><br><span class="line">    <span class="keyword">if</span>(head.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> length = <span class="number">1</span>;</span><br><span class="line">    ListNode temp = head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到链表长度</span></span><br><span class="line">    <span class="keyword">while</span>(temp.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">        length++;</span><br><span class="line">        temp = temp.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(length == n)&#123;</span><br><span class="line">        <span class="keyword">return</span> head.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    temp = head;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//知道到需要删除元素d</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length - n; i++) &#123;</span><br><span class="line">        temp = temp.next;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode pre = temp;</span><br><span class="line">    ListNode target = temp.next;</span><br><span class="line">    ListNode after = target.next;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//节点的处理</span></span><br><span class="line">    pre.next = after;</span><br><span class="line">    target.next = <span class="keyword">null</span>;</span><br><span class="line">    target = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思路2：</strong></p><p>主要是用到双指针，慢指针（p1），快指针（p2），想法呢是当快指针的下一个指向null的时候（null == p2.next）的时候，p1指向的下一个元素就是我们要删除的节点。怎么样实现呢？</p><ol><li>假设一开始p1和p2都指向头指针（head），有一个链表1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5，要删除的是倒数第n（2）个节点。</li><li>按照上面的思路呢，要求p1指向3的时候，p2指向5，这样null == p2.next，p1.next也刚好是我们要删除的节点。</li><li>这样一看，会发现，p2刚好比p1多走了n步</li><li>想想一种特殊情况，如果是删除倒数第5个节点呢，这样p2直接就指向了null，所以要返回的头节点就是p1.next</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    ListNode p1 = head;</span><br><span class="line">    ListNode p2 = n1;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//快指针先走</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        p2 = p2.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//特殊情况</span></span><br><span class="line">    <span class="keyword">if</span>(p2 == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> p1.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(p2.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">        p2 = p2.next;</span><br><span class="line">        p1 = p1.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//到这里就说明null == p2.next</span></span><br><span class="line">    <span class="comment">//进行节点的操作</span></span><br><span class="line">    ListNode target = p1.next;</span><br><span class="line">    ListNode after = target.next;</span><br><span class="line">    p1.next = after;</span><br><span class="line">    </span><br><span class="line">    target.next = <span class="keyword">null</span>;</span><br><span class="line">    target = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="75、颜色分类"><a href="#75、颜色分类" class="headerlink" title="75、颜色分类"></a>75、颜色分类</h4><hr><p>给定一个包含红色、白色和蓝色，一共 <em>n</em> 个元素的数组，<strong><a href="https://baike.baidu.com/item/原地算法" target="_blank" rel="noopener">原地</a></strong>对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。</p><p>此题中，我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。</p><p><strong>注意:</strong><br>不能使用代码库中的排序函数来解决这道题。</p><p><strong>示例:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [2,0,2,1,1,0]</span><br><span class="line">输出: [0,0,1,1,2,2]</span><br></pre></td></tr></table></figure><p><strong>进阶：</strong></p><ul><li>一个直观的解决方案是使用计数排序的两趟扫描算法。<br>首先，迭代计算出0、1 和 2 元素的个数，然后按照0、1、2的排序，重写当前数组。</li><li>你能想出一个仅使用常数空间的一趟扫描算法吗？</li></ul><hr><p><strong>思路：</strong></p><p>很直观暴力的方法这里就不说了，来用一趟扫描算法就解决问题是最好的。</p><p>最初的想法就是逐个遍历，遇到2移到最右边，遇到0移到最左边，剩下的中间就是1了。假如第一个数字就是2呢，当然肯定是和最右边的数进行交换，并且所谓的最右边是不是要往前移动1。</p><p>上面的思路就设及到了3个变量，逐个遍历需要一个指针（cur），最左边（p1），最右边（p2）。</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sortColors</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> p2 = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;<span class="comment">//用来交换临时变量</span></span><br><span class="line">    <span class="keyword">while</span>(cur &lt;= p2) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[cur] == <span class="number">2</span>)&#123;<span class="comment">//如果遍历的到的数==2，交换</span></span><br><span class="line">            temp = nums[cur];</span><br><span class="line">            nums[cur] = nums[p2];</span><br><span class="line">            nums[p2] = temp;</span><br><span class="line">            p2--;<span class="comment">//最右边的指针后退</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[cur] == <span class="number">0</span>)&#123;<span class="comment">//如果==0，交换</span></span><br><span class="line">            temp = nums[cur];</span><br><span class="line">            nums[cur] = nums[p1];</span><br><span class="line">            nums[p1] = temp;</span><br><span class="line">            p1++;<span class="comment">//最左边的指针前进</span></span><br><span class="line">            <span class="comment">//为什么要cur++？</span></span><br><span class="line">            <span class="comment">//假设第一个数字刚好是0，如果不加会怎么样？</span></span><br><span class="line">            <span class="comment">//p1一直++，而cur不更新，一直是nums[cur] == 0;</span></span><br><span class="line">            <span class="comment">//而且进入到这个循环nums[cur]要么等于0，要么等于1，这两种情况cur都要++</span></span><br><span class="line">            cur++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//同样进入到这个判断就是nums[cur] == 1</span></span><br><span class="line">            cur++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、困难"><a href="#3、困难" class="headerlink" title="3、困难"></a>3、困难</h3><hr><h4 id="42、接雨水"><a href="#42、接雨水" class="headerlink" title="42、接雨水"></a>42、接雨水</h4><hr><p>给定 <em>n</em> 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rainwatertrap.png" alt="img"></p><p>上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 <strong>感谢 Marcos</strong> 贡献此图。</p><p><strong>示例:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [0,1,0,2,1,0,1,3,2,1,2,1]</span><br><span class="line">输出: 6</span><br></pre></td></tr></table></figure><hr><p><strong>思路：</strong></p><p>这种接雨水问题，主要是要考虑木桶原理，也就是要尽可能地去找出短的一边，而且一般来说，这种遍历问题，使用双指针的效率比较搞。下面来看看具体情况：</p><ol><li>左边比较低</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">          *</span><br><span class="line">*_ _ _ _ _*</span><br></pre></td></tr></table></figure><p>左边比较低呢，我们就要从左边取1，然后可以接5滴雨水</p><ol start="2"><li>右边比较低</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*         </span><br><span class="line">*_ _ _ _ _*</span><br></pre></td></tr></table></figure><p>这样我们就要从右边取1，同样能接5滴雨水</p><ol start="3"><li>中间还有一个多余的</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">        *</span><br><span class="line">        *     *</span><br><span class="line">* _ _ _ * _ _ *</span><br></pre></td></tr></table></figure><p>这种情况的话呢，一开始是<strong>最左边</strong>的比<strong>最右边</strong>的低，取左边的1 * 3 = 3，接着呢最左边<strong>变成了3</strong>，比最右边的低，取右边的2 * 2 = 4。所以总共能接7滴雨水。</p><ol start="4"><li>中间有两个多余的呢</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">          *    </span><br><span class="line">      *   *</span><br><span class="line">*     *   *</span><br><span class="line">* _ _ * _ * _ _ *</span><br></pre></td></tr></table></figure><p>各位小伙伴也可以先想想了，首先取右边1 * 2 = 2，接着左边2 * 2 = 4，再接着左边3 * 1 = 3，总共能接9滴雨水。</p><p>中间再复杂也是这个思路，但是我们现在是上帝视角，所以能知道多少个空，可以用乘法，到写程序的时候肯定是需要遍历，然后用加法的。</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">trap</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right = height.length - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//用来记录左右最高峰</span></span><br><span class="line">    <span class="keyword">int</span> left_max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right_max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">        <span class="comment">//左边的比右边的低</span></span><br><span class="line">        <span class="keyword">if</span>(height[left] &lt; height[right])&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/**假设现在开头是[2, 1, 0, 2, ... , 3]</span></span><br><span class="line"><span class="comment">              * 一开始height[left] 和 leftmax肯定相等 = 2，所以result其实加的是0</span></span><br><span class="line"><span class="comment">              * 再一次循环呢，height[left] = 1, left_max还是等于2</span></span><br><span class="line"><span class="comment">              * 就证明有一个空位可以接水，这样逐个遍历就首先了加法</span></span><br><span class="line"><span class="comment">              */</span></span><br><span class="line">            left_max = Math.max(left_max, height[left]);</span><br><span class="line">            result += left_max - height[left++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right_max = Math.max(right_max, height[right]);</span><br><span class="line">            result += right_max - height[right--];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="61、旋转链表"><a href="#61、旋转链表" class="headerlink" title="61、旋转链表"></a>61、旋转链表</h4><hr><p>给定一个链表，旋转链表，将链表每个节点向右移动 <em>k</em> 个位置，其中 <em>k</em> 是非负数。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, k &#x3D; 2</span><br><span class="line">输出: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL</span><br><span class="line">解释:</span><br><span class="line">向右旋转 1 步: 5-&gt;1-&gt;2-&gt;3-&gt;4-&gt;NULL</span><br><span class="line">向右旋转 2 步: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入: 0-&gt;1-&gt;2-&gt;NULL, k &#x3D; 4</span><br><span class="line">输出: 2-&gt;0-&gt;1-&gt;NULL</span><br><span class="line">解释:</span><br><span class="line">向右旋转 1 步: 2-&gt;0-&gt;1-&gt;NULL</span><br><span class="line">向右旋转 2 步: 1-&gt;2-&gt;0-&gt;NULL</span><br><span class="line">向右旋转 3 步: 0-&gt;1-&gt;2-&gt;NULL</span><br><span class="line">向右旋转 4 步: 2-&gt;0-&gt;1-&gt;NULL</span><br></pre></td></tr></table></figure><hr><p><strong>思路：</strong></p><p>因为是向右移动节点，自然而然地就想到了先首尾相连成一个环，再来看下情况如何</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 --&gt; 2 --&gt; 3 --&gt; 4 --&gt; 5</span><br><span class="line">^                       |</span><br><span class="line">| __ __ __ __ __ __ __ _|</span><br></pre></td></tr></table></figure><ol><li>如果移动1，那么5为新的head，4为新的tail，从旧的head（1）移到4需要3步</li><li>如果移动2，那么4为新的head，3为新的tail，同上需要2步</li><li>如果移动3，那么3为新的head，2为新的tail，同上需要1步</li></ol><p>找到新的头尾节点后需要的就是把环破坏掉（tail的下一个节点指向空即可），大家有没有发现什么嘛，就是tail 是等于length - k - 1，还有呢，想想k如果大于一个链表的长度呢。如果长度为5，k=5的话是不是相当于移动0次，k=6的话是不是相当于移动1次。</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">rotateRight</span><span class="params">(ListNode head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//边界情况直接返回head</span></span><br><span class="line">    <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span> || k == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> length = <span class="number">1</span>;</span><br><span class="line">    ListNode oldTail = head;</span><br><span class="line">    ListNode newTail = head;</span><br><span class="line">    ListNode newHead = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//遍历到旧尾节点，统计链表长度, 并且头尾相连</span></span><br><span class="line">    <span class="keyword">while</span>(oldTail.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">        oldTail = oldTail.next;</span><br><span class="line">        length++;</span><br><span class="line">    &#125;</span><br><span class="line">    oldTail.next = head;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//计算真正的k</span></span><br><span class="line">    k %= length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length - k - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        newTail = newTail.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    newHead = newTail.next;</span><br><span class="line">    newTail.next = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> newHead;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1、简单&quot;&gt;&lt;a href=&quot;#1、简单&quot; class=&quot;headerlink&quot; title=&quot;1、简单&quot;&gt;&lt;/a&gt;1、简单&lt;/h3&gt;&lt;h4 id=&quot;283-移动零&quot;&gt;&lt;a href=&quot;#283-移动零&quot; class=&quot;headerlink&quot; title=&quot;283
      
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="https://imperfect.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="https://imperfect.top/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>模板方法模式【java设计模式】</title>
    <link href="https://imperfect.top/posts/d5c2f3a8.html"/>
    <id>https://imperfect.top/posts/d5c2f3a8.html</id>
    <published>2020-04-02T20:55:53.000Z</published>
    <updated>2020-05-02T14:04:43.155Z</updated>
    
    <content type="html"><![CDATA[<p>用一个例子来让大家理解什么叫模板方法模式，直接进入主题。<strong>背景：</strong>现在你是荣耀王者段位，你要给新手推荐英雄出装，需要什么呢，需要一个抽象英雄类，里面有装备（方法），再有一个具体英雄类即可。<a id="more"></a></p><h4 id="抽象英雄类："><a href="#抽象英雄类：" class="headerlink" title="抽象英雄类："></a>抽象英雄类：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractHero</span> </span>&#123;</span><br><span class="line">    <span class="comment">//3个装备槽</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">slot1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">slot2</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">slot3</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="具体英雄类："><a href="#具体英雄类：" class="headerlink" title="具体英雄类："></a>具体英雄类：</h4><p>婉儿和元哥</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WanEr</span> <span class="keyword">extends</span> <span class="title">AbstractHero</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">slot1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"法穿鞋 "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">slot2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"回响 "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">slot3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"面具"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YuanGe</span> <span class="keyword">extends</span> <span class="title">AbstractHero</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">slot1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"冷却鞋 "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">slot2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"黑切 "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">slot3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"破军"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试类："><a href="#测试类：" class="headerlink" title="测试类："></a>测试类：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTemplateMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    AbstractHero waner = <span class="keyword">new</span> WanEr();</span><br><span class="line">    AbstractHero yuange = <span class="keyword">new</span> YuanGe();</span><br><span class="line"></span><br><span class="line">    waner.slot1();</span><br><span class="line">    waner.slot2();</span><br><span class="line">    waner.slot3();</span><br><span class="line"></span><br><span class="line">    yuange.slot1();</span><br><span class="line">    yuange.slot2();</span><br><span class="line">    yuange.slot3();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的测试类代码中我们可以发现，比较臃肿，每个英雄正常来说都是出三件装备，那么可不可以弄一个出装推荐呢，<strong>把三个结合在一起</strong></p><h4 id="改动后的抽象英雄类"><a href="#改动后的抽象英雄类" class="headerlink" title="改动后的抽象英雄类"></a>改动后的抽象英雄类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractHero</span> </span>&#123;</span><br><span class="line">    <span class="comment">//3个装备槽</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">slot1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">slot2</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">slot3</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//这个就称为模板方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">equipments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        slot1();</span><br><span class="line">        slot2();</span><br><span class="line">        slot3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="改动后的测试类"><a href="#改动后的测试类" class="headerlink" title="改动后的测试类"></a>改动后的测试类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTemplateMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    AbstractHero waner = <span class="keyword">new</span> WanEr();</span><br><span class="line">    AbstractHero yuange = <span class="keyword">new</span> YuanGe();</span><br><span class="line"></span><br><span class="line">    waner.equipments();</span><br><span class="line">    yuange.equipments();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样代码是不是显得比较清晰，其实模板方法模式就是这么简单，所以大家以后有听到说“这个需求简单啊，模板方法模式整合下就好了”，不要觉得很高盛莫测。</p><h4 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h4><p><img src="1.png" alt=""></p><p>类图就很清晰地看到，抽象类里面有个模板方法对其它方法的一个整合。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用一个例子来让大家理解什么叫模板方法模式，直接进入主题。&lt;strong&gt;背景：&lt;/strong&gt;现在你是荣耀王者段位，你要给新手推荐英雄出装，需要什么呢，需要一个抽象英雄类，里面有装备（方法），再有一个具体英雄类即可。
    
    </summary>
    
    
      <category term="设计模式" scheme="https://imperfect.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="进阶" scheme="https://imperfect.top/tags/%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>建造者模式【java设计模式】</title>
    <link href="https://imperfect.top/posts/d76ea658.html"/>
    <id>https://imperfect.top/posts/d76ea658.html</id>
    <published>2020-04-02T20:55:38.000Z</published>
    <updated>2020-05-02T14:04:43.130Z</updated>
    
    <content type="html"><![CDATA[<p>什么是建造者模式呢，顾名思义，把某个东西创建出来，说得准确点是，把各种部件按照需要的方式建造成一个产品。建造者模式<strong>需要四个类，抽象建造者，具体建造者，产品类，导演类</strong>。<a id="more"></a></p><h3 id="产品类："><a href="#产品类：" class="headerlink" title="产品类："></a>产品类：</h3><p>手机，一般来说，产品类的实现都采用了之前所说的<strong>模板方法类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="comment">//手机的部件</span></span><br><span class="line">    <span class="keyword">private</span> String cpu;</span><br><span class="line">    <span class="keyword">private</span> String screen;</span><br><span class="line">    <span class="keyword">private</span> String camera;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//对部件的逻辑处理</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCpu</span><span class="params">(String cpu)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cpu = cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScreen</span><span class="params">(String screen)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.screen = screen;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCamera</span><span class="params">(String camera)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.camera = camera;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//模板方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">use</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Phone&#123;"</span> +</span><br><span class="line">                <span class="string">"cpu='"</span> + cpu + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", screen="</span> + screen +</span><br><span class="line">                <span class="string">", camera="</span> + camera +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象建造者类："><a href="#抽象建造者类：" class="headerlink" title="抽象建造者类："></a>抽象建造者类：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractBuilder</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//多个部件供我们组合成不同的产品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">midCpu</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">midScreen</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">midCamera</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">topCpu</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">topScreen</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">topCamera</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//组合完成后返回产品类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Phone <span class="title">buildPhone</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="具体建造者类："><a href="#具体建造者类：" class="headerlink" title="具体建造者类："></a>具体建造者类：</h3><p>注意并不是具体的产品，而是具体的厂商，生产不同品牌部件的建造者，在本例中有两个具体建造者类，一个是生产一加的各部件，一个是生产魅族的各部件。当然现实中两家的cpu，屏幕可能用的是同一家。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnePlusBuilder</span> <span class="keyword">extends</span> <span class="title">AbstractBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">midCpu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        phone.setCpu(<span class="string">"一加高配处理器"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">midScreen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        phone.setScreen(<span class="string">"一加高配屏幕"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">midCamera</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        phone.setCamera(<span class="string">"一加高配相机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">topCpu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        phone.setCpu(<span class="string">"一加顶配处理器"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">topScreen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        phone.setScreen(<span class="string">"一加顶配屏幕"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">topCamera</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        phone.setCamera(<span class="string">"一加顶配相机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Phone <span class="title">buildPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MeizuBuilder</span> <span class="keyword">extends</span> <span class="title">AbstractBuilder</span> </span>&#123;</span><br><span class="line">    Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">midCpu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        phone.setCpu(<span class="string">"魅族中配处理器"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">midScreen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        phone.setScreen(<span class="string">"魅族中配屏幕"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">midCamera</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        phone.setCamera(<span class="string">"魅族中配相机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">topCpu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        phone.setCpu(<span class="string">"魅族高配处理器"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">topScreen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        phone.setScreen(<span class="string">"魅族高配屏幕"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">topCamera</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        phone.setCamera(<span class="string">"魅族高配相机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Phone <span class="title">buildPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="导演类"><a href="#导演类" class="headerlink" title="导演类:"></a>导演类:</h3><p>导演嘛，很形象，指挥要建造什么具体的产品</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123;</span><br><span class="line">    MeizuBuilder meizuBuilder = <span class="keyword">new</span> MeizuBuilder();</span><br><span class="line">    OnePlusBuilder onePlusBuilder = <span class="keyword">new</span> OnePlusBuilder();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一加的高配手机</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Phone <span class="title">buildOnePlusMidPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        onePlusBuilder.midCpu();</span><br><span class="line">        onePlusBuilder.midCamera();</span><br><span class="line">        onePlusBuilder.midScreen();</span><br><span class="line">        <span class="keyword">return</span> onePlusBuilder.buildPhone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一加的顶配手机</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Phone <span class="title">buildOnePlusTopPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        onePlusBuilder.topCpu();</span><br><span class="line">        onePlusBuilder.topCamera();</span><br><span class="line">        onePlusBuilder.topScreen();</span><br><span class="line">        <span class="keyword">return</span> onePlusBuilder.buildPhone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//魅族的中配手机</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Phone <span class="title">buildMeizuMidPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        meizuBuilder.midCpu();</span><br><span class="line">        meizuBuilder.midCamera();</span><br><span class="line">        meizuBuilder.midScreen();</span><br><span class="line">        <span class="keyword">return</span> meizuBuilder.buildPhone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//魅族的高配手机</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Phone <span class="title">buildMeizuTopPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        meizuBuilder.topCpu();</span><br><span class="line">        meizuBuilder.topCamera();</span><br><span class="line">        meizuBuilder.topScreen();</span><br><span class="line">        <span class="keyword">return</span> meizuBuilder.buildPhone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在不是都说手机是堆料嘛，导演类就负责，我能够用不同的料，甚至同样的料不同的堆积方法来给你堆出不同的产品。</p><p>像上面的例子中，我有6个部件，<strong>但是不同的部件我能够生产不同的产品。</strong></p><h3 id="测试类："><a href="#测试类：" class="headerlink" title="测试类："></a>测试类：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Director director = <span class="keyword">new</span> Director();</span><br><span class="line"></span><br><span class="line">    Phone p = director.buildMeizuMidPhone();</span><br><span class="line">    System.out.println(p.use());</span><br><span class="line"></span><br><span class="line">    p = director.buildMeizuTopPhone();</span><br><span class="line">    System.out.println(p.use());</span><br><span class="line"></span><br><span class="line">    p = director.buildOnePlusMidPhone();</span><br><span class="line">    System.out.println(p.use());</span><br><span class="line"></span><br><span class="line">    p = director.buildOnePlusTopPhone();</span><br><span class="line">    System.out.println(p.use());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="与工厂模式的区别："><a href="#与工厂模式的区别：" class="headerlink" title="与工厂模式的区别："></a>与工厂模式的区别：</h3><p>两者比较相似，但是不同的点还是比较清晰。</p><ul><li>工厂模式<strong>注重的是个体</strong>，你要什么手机，我就生产一部手机出来给你，不必要关心你内部的部件是怎样组合的，通常是一个方法生产一个产品。</li><li>建造者模式就不一样了，<strong>注重的是部件的组合</strong>，不同的部件组合可以生产出来不一样的产品，通常是几个方法的整合次啊能生产一个产品</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;什么是建造者模式呢，顾名思义，把某个东西创建出来，说得准确点是，把各种部件按照需要的方式建造成一个产品。建造者模式&lt;strong&gt;需要四个类，抽象建造者，具体建造者，产品类，导演类&lt;/strong&gt;。
    
    </summary>
    
    
      <category term="设计模式" scheme="https://imperfect.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="进阶" scheme="https://imperfect.top/tags/%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
</feed>
